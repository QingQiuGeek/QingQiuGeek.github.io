<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Lambda on 青秋博客</title>
        <link>/zh-cn/tags/lambda/</link>
        <description>Recent content in Lambda on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Sun, 01 Sep 2024 21:34:40 +0000</lastBuildDate><atom:link href="/zh-cn/tags/lambda/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>浅谈维度建模、数据分析模型，何为数据仓库，与数据库的区别</title>
        <link>/zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Sun, 01 Sep 2024 21:34:40 +0000</pubDate>
        
        <guid>/zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#%e5%89%8d%e8%a8%80&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;前言
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;1991 年，数据仓库之父 比尔·恩门 著书《Building the DataWarehouse》，要求&lt;strong&gt;构建数据仓库&lt;/strong&gt; 时，遵循&lt;strong&gt;范式建模&lt;/strong&gt;，即从关系型数据库中提取的范式数据，仍按范式存储到数据仓库中，这样就导致&lt;strong&gt;数仓中有很多小表，查询的时候必然会有很多表的关联&lt;/strong&gt;，极大地影响查询效率和性能。&lt;/li&gt;
&lt;li&gt;1994 年，拉尔夫·金博尔 著书《The DataWarehouse Toolkit》，提出&lt;strong&gt;维度建模和数据集市的概念&lt;/strong&gt;，&lt;strong&gt;维度建模是反范式建模，自下而上&lt;/strong&gt; ，然而这种方式仍有缺点：那就是每个业务平台的数据有各自的数据集市，集市之间&lt;strong&gt;数据隔离，存在数据不一致、重复&lt;/strong&gt;的情况。&lt;/li&gt;
&lt;li&gt;1998-2001 年，比尔·恩门派和金博尔派合并，比尔·恩门提出&lt;strong&gt;CIF 架构：数仓分层&lt;/strong&gt;，不同层采用不同的建模方式，同时解决了数据不一致和查询效率低的问题。
&lt;strong&gt;基于以上，有了范式建模、维度建模、实体建模三种主要建模方式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;浅谈维度建模&#34;&gt;&lt;a href=&#34;#%e6%b5%85%e8%b0%88%e7%bb%b4%e5%ba%a6%e5%bb%ba%e6%a8%a1&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;浅谈维度建模
&lt;/h3&gt;&lt;p&gt;维度建模主要&lt;strong&gt;面向分析场景，分为维度表和事实表，&lt;strong&gt;是数据仓库中最常用的数据建模技术之一，建模过程和关系型数据库的建表很像，下图中，商家 ID、产品 ID、时间 ID 就是不同的&lt;/strong&gt;维度列&lt;/strong&gt;，而订单额就是&lt;strong&gt;度量值&lt;/strong&gt;，&lt;strong&gt;维度+度量值=事实表&lt;/strong&gt;。&lt;strong&gt;每个维度列同时也有自己的维度表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/image.png&#34;
	width=&#34;1390&#34;
	height=&#34;917&#34;
	srcset=&#34;/zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/image_hu_c2320fa1ccc21e73.png 480w, /zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/image_hu_ed9a7f1cbc578571.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;363px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么基于以上，有如下两种数据分析模型。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据分析模型&#34;&gt;&lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e5%88%86%e6%9e%90%e6%a8%a1%e5%9e%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;数据分析模型
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/image-1.png&#34;
	width=&#34;1621&#34;
	height=&#34;871&#34;
	srcset=&#34;/zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/image-1_hu_cc7f0e35bbf830cf.png 480w, /zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/image-1_hu_ab69c5f079837f4c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/image-2.png&#34;
	width=&#34;1659&#34;
	height=&#34;958&#34;
	srcset=&#34;/zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/image-2_hu_171ecbdb507d0e7d.png 480w, /zh-cn/post/2024/09/%E6%B5%85%E8%B0%88%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E4%BD%95%E4%B8%BA%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/image-2_hu_1e74558ec6b336be.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;415px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对比&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询效率：雪花模型有很多小表，看起来更为&lt;strong&gt;范式化&lt;/strong&gt;，但这导致查询时需要关联很多表，&lt;strong&gt;查询效率比星型模型低&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;数据冗余：星型模型的表通常是&lt;strong&gt;宽表，伪范式&lt;/strong&gt;，即表有很多字段，这导致星型模型存在较多的&lt;strong&gt;数据冗余&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据仓库&#34;&gt;&lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e4%bb%93%e5%ba%93&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;数据仓库
&lt;/h2&gt;&lt;h3 id=&#34;何为数据仓库&#34;&gt;&lt;a href=&#34;#%e4%bd%95%e4%b8%ba%e6%95%b0%e6%8d%ae%e4%bb%93%e5%ba%93&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;何为数据仓库
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据仓库（Data Warehouse）即是存储&lt;strong&gt;历史&lt;/strong&gt;数据的仓库，简写为&lt;strong&gt;DW 或 DWH&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;数据仓库的&lt;strong&gt;目的是构建面向分析的集成化数据环境（OLAP），为企业提供决策支持&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;仓库的数据来自各个业务平台，业务平台中的数据形式多种多样，可能是 MySQL 等关系数据库里的结构化数据，可能是 Word、Excel 文档中的非结构化数据，还可能是 HTML、XML 等自描述的半结构化数据。这些业务数据经过一系列的 ETL（抽取、转换、加载），最终以一种&lt;strong&gt;统一的格式&lt;/strong&gt;装载进数据仓库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据仓库本身并不“生产”任何数据，也不需要“消费”任何的数据，只是在内部对数据做了一些数据清洗转移操作，好比流水线&lt;/strong&gt;，数据来源于外部，最终开放给外部应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据仓库特征&#34;&gt;&lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e4%bb%93%e5%ba%93%e7%89%b9%e5%be%81&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;数据仓库特征
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面向主题&lt;/strong&gt;：&lt;br&gt;
传统数据库中，最大的特点是面向应用进行数据的组织，各个业务系统可能是相互分离的。而&lt;strong&gt;数据仓库则是面向主题的&lt;/strong&gt;。主题是一个抽象的概念，是较高层次上企业信息系统中的&lt;strong&gt;数据综合、归类并进行分析利用的抽象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成性&lt;/strong&gt;：&lt;br&gt;
通过&lt;strong&gt;对分散、独立、异构的数据库数据进行 ETL 并汇总&lt;/strong&gt;得到了数据仓库的数据，这样保证了数据仓库内的&lt;strong&gt;数据的一致性&lt;/strong&gt;。 数据仓库中的综合数据不能从原有的数据库系统直接得到。因此在数据进入数据仓库之前，必然要经过清洗、一致性等操作，这一步是数据仓库建设中最关键、最复杂的一步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反应历史变化&lt;/strong&gt;：&lt;strong&gt;数仓反应的是某段时间内的历史数据&lt;/strong&gt;，这也是数仓和数据库的区别之一。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可修改&lt;/strong&gt;：数据进入数据仓库以后，一般情况下被较长时间保留。数据仓库中一般有大量的查询操作，但修改删除操作很少，只需定时加载更新即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时效性&lt;/strong&gt;：数仓存储的是历史数据，按照时间顺序追加，有时间属性。数仓用户通过分析企业过去一段时间业务的经营状况，挖掘潜在价值。但是分析的结果只能反映过去某段时间的情况，随着业务变化时间改变，数仓中的数据就会失去价值，需要载入新数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据仓库和数据库的区别&#34;&gt;&lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e4%bb%93%e5%ba%93%e5%92%8c%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;  数据仓库和数据库的区别
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;数据库与数据仓库的区别实际讲的是 OLTP 与 OLAP 的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作型处理，叫联机事务处理 OLTP，也可以称面向交易的处理系统，&lt;strong&gt;针对日常事务处理。用户较为关心操作的响应时间、数据的安全性、完整性和并发支持的用户数等问题&lt;/strong&gt;。传统的数据库系统作为数据管理的主要手段，主要用于操作型处理，像 MYSQL，Oracle 等关系型数据库一般属于 OLTP。&lt;/li&gt;
&lt;li&gt;分析型处理，叫联机分析处理 OLAP，一般针对&lt;strong&gt;某些主题的历史数据&lt;/strong&gt;进行分析，&lt;strong&gt;支持管理决策。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先要明白，数据仓库的出现，并不是要取代数据库。&lt;strong&gt;数据库是面向事务的设计，数据仓库是面向主题设计的。数据库一般存储业务数据，数据仓库存储的一般是历史数据&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库设计是尽量避免冗余&lt;/strong&gt;，一般针对某一业务应用进行设计，比如一张简单的 User 表，记录用户名、 密码等简单数据即可，符合业务应用，但是不符合分析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据仓库在设计是有意引入冗余&lt;/strong&gt;，依照分析需求，分析维度、分析指标进行设计。 数据库是为&lt;strong&gt;捕获数据&lt;/strong&gt;而设计，数据仓库是为&lt;strong&gt;分析数据&lt;/strong&gt;而设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么不直接用业务平台的数据而要建设数仓&#34;&gt;&lt;a href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e7%9b%b4%e6%8e%a5%e7%94%a8%e4%b8%9a%e5%8a%a1%e5%b9%b3%e5%8f%b0%e7%9a%84%e6%95%b0%e6%8d%ae%e8%80%8c%e8%a6%81%e5%bb%ba%e8%ae%be%e6%95%b0%e4%bb%93&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;  为什么不直接用业务平台的数据而要建设数仓？ 
&lt;/h3&gt;&lt;p&gt;实际在数仓出现之前，确实是这么做的，但是有很多数据分析的先驱者当时已经发现，简单的直接访问方式很难良好工作，原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于&lt;strong&gt;安全&lt;/strong&gt;或其他因素不能直接访问某些业务数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务平台存储的是当前数据，存在于 RDBMS，并且数据版本变更很频繁，而大数据需要的是历史数据，读多改少。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;各个平台&lt;strong&gt;数据存储是隔离的&lt;/strong&gt;，且**数据格式不统一，**难以建立、维护、汇总数据。&lt;/li&gt;
&lt;li&gt;业务系统的表结构（OLTP）为事务处理性能而优化，有时并&lt;strong&gt;不适合查询与分析（OLAP）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;有时用户要看到的某些数据字段在数据库中并不存在，是后期聚合处理生成的。&lt;/li&gt;
&lt;li&gt;业务平台是跑业务的，本身就占用了一定数据库读写资源，大数据分析再从每个表中频繁读取数据，影响业务平台的性能，不够专业。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;以银行业务为例&#34;&gt;&lt;a href=&#34;#%e4%bb%a5%e9%93%b6%e8%a1%8c%e4%b8%9a%e5%8a%a1%e4%b8%ba%e4%be%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;以银行业务为例  
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据库是事务系统的数据平台，客户在银行做的每笔交易都会写入数据库，被记录下来，可以简单地理解为用数据库记账。&lt;/li&gt;
&lt;li&gt;数据仓库是分析系统的数据平台，它从事务系统获取数据，并做汇总、加工，为决策者提供决策的依据。比如，某银行某分行一个月发生多少交易，该分行当前存款余额是多少。如果存款又多，消费交易又多，那么该地区就有必要设立 ATM 了。 显然，银行的交易量是巨大的，通常以百万甚至千万次来计算。&lt;/li&gt;
&lt;li&gt;事务系统是实时的，这就要求&lt;strong&gt;时效性&lt;/strong&gt;，客户存一笔钱需要几十秒是无法忍受的，这就要求数据库只能存储很短一段时间的数据。 而&lt;strong&gt;分析系统是事后&lt;/strong&gt;的，它要提供关注时间段内所有的有效数据。这些数据是海量的，汇总计算起来也要慢一些，但是，只要能够提供有效的分析数据就达到目的了。&lt;/li&gt;
&lt;li&gt;数据仓库，是在数据库已经大量存在的情况下，为了进一步挖掘数据资源、为了决策需要而产生的，&lt;strong&gt;它决不是所谓的“大型数据库”&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考博客：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/u012955829/article/details/141496865&#34;  title=&#34;数据仓库系列 1：什么是数据仓库,它与传统数据库有什么不同?-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据仓库系列 1：什么是数据仓库,它与传统数据库有什么不同?-CSDN 博客&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
