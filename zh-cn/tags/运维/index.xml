<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>运维 on 青秋博客</title>
        <link>/zh-cn/tags/%E8%BF%90%E7%BB%B4/</link>
        <description>Recent content in 运维 on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Tue, 10 Jun 2025 15:18:53 +0000</lastBuildDate><atom:link href="/zh-cn/tags/%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>服务器CPU飙升该如何排查&amp;火焰图</title>
        <link>/zh-cn/post/2025/06/%E6%9C%8D%E5%8A%A1%E5%99%A8cpu%E9%A3%99%E5%8D%87%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E7%81%AB%E7%84%B0%E5%9B%BE/</link>
        <pubDate>Tue, 10 Jun 2025 15:18:53 +0000</pubDate>
        
        <guid>/zh-cn/post/2025/06/%E6%9C%8D%E5%8A%A1%E5%99%A8cpu%E9%A3%99%E5%8D%87%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E7%81%AB%E7%84%B0%E5%9B%BE/</guid>
        <description>&lt;h2 id=&#34;查看系统状态&#34;&gt;&lt;a href=&#34;#%e6%9f%a5%e7%9c%8b%e7%b3%bb%e7%bb%9f%e7%8a%b6%e6%80%81&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;&lt;strong&gt;查看系统状态&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;使用工具如&lt;code&gt;top&lt;/code&gt;、&lt;code&gt;htop&lt;/code&gt;、&lt;code&gt;ps&lt;/code&gt;等查看当前系统中&lt;strong&gt;各个进程的 CPU 使用情况&lt;/strong&gt;，确认是哪个进程导致 CPU 飙升。&lt;/p&gt;
&lt;h2 id=&#34;查看进程类型&#34;&gt;&lt;a href=&#34;#%e6%9f%a5%e7%9c%8b%e8%bf%9b%e7%a8%8b%e7%b1%bb%e5%9e%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;&lt;strong&gt;查看进程类型&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;确定该进程是业务进程、系统进程还是其他类型&lt;/strong&gt;。如果是业务进程，进一步确认是哪个服务的进程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用 ps aux 列出所有进程的详细信息&lt;/li&gt;
&lt;li&gt;Linux 系统中，每个进程的信息都存储在 &lt;code&gt;/proc/&amp;lt;pid&amp;gt;&lt;/code&gt; 目录中。使用 cat 查看/proc 目录&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;查看该进程的日志&#34;&gt;&lt;a href=&#34;#%e6%9f%a5%e7%9c%8b%e8%af%a5%e8%bf%9b%e7%a8%8b%e7%9a%84%e6%97%a5%e5%bf%97&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;查看该进程的日志
&lt;/h2&gt;&lt;p&gt;了解是否有异常日志信息，比如频繁的错误、异常的请求等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tail -f /var/log/&amp;lt;process_log_file&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;定位进程的线程&#34;&gt;&lt;a href=&#34;#%e5%ae%9a%e4%bd%8d%e8%bf%9b%e7%a8%8b%e7%9a%84%e7%ba%bf%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;定位进程的线程
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;找到进程 ID（PID）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ps -ef | grep &amp;lt;进程名&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;显示进程的所有线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;ps -L&lt;/code&gt; 选项可以显示指定进程的所有线程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/06/%E6%9C%8D%E5%8A%A1%E5%99%A8cpu%E9%A3%99%E5%8D%87%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E7%81%AB%E7%84%B0%E5%9B%BE/image.png&#34;
	width=&#34;1446&#34;
	height=&#34;931&#34;
	srcset=&#34;/zh-cn/post/2025/06/%E6%9C%8D%E5%8A%A1%E5%99%A8cpu%E9%A3%99%E5%8D%87%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E7%81%AB%E7%84%B0%E5%9B%BE/image_hu_1e797ac9c2d04920.png 480w, /zh-cn/post/2025/06/%E6%9C%8D%E5%8A%A1%E5%99%A8cpu%E9%A3%99%E5%8D%87%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E7%81%AB%E7%84%B0%E5%9B%BE/image_hu_d960372203ebcfe2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;查看负载情况&#34;&gt;&lt;a href=&#34;#%e6%9f%a5%e7%9c%8b%e8%b4%9f%e8%bd%bd%e6%83%85%e5%86%b5&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;查看负载情况
&lt;/h2&gt;&lt;p&gt;检查是否有异常的流量涌入，导致进程负载过高。如果是由于流量过高导致的 CPU 飙升，可以尝试对流量进行控制，比如使用限流工具（如&lt;code&gt;nginx&lt;/code&gt;的限流模块、&lt;code&gt;iptables&lt;/code&gt;等）减少进入该服务的流量。&lt;/p&gt;
&lt;h2 id=&#34;紧急处理&#34;&gt;&lt;a href=&#34;#%e7%b4%a7%e6%80%a5%e5%a4%84%e7%90%86&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;紧急处理
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优先级调整&lt;/strong&gt;：如果进程是业务进程且不能立即停止，可以尝试降低该进程的优先级，使用&lt;code&gt;nice&lt;/code&gt;或&lt;code&gt;renice&lt;/code&gt;命令，减少其对 CPU 的占用，从而让其他服务能够正常运行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;renice -n 10 -p &amp;lt;pid&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;临时隔离&lt;/strong&gt;：如果该进程是某个服务的实例，可以尝试将该实例从负载均衡中移除，让其他正常实例继续提供服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;详细排查&#34;&gt;&lt;a href=&#34;#%e8%af%a6%e7%bb%86%e6%8e%92%e6%9f%a5&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;详细排查
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;火焰图分析&lt;/strong&gt;：使用火焰图工具（如&lt;code&gt;perf&lt;/code&gt;、&lt;code&gt;flamegraph&lt;/code&gt;等）分析进程的 CPU 使用情况，找到具体的瓶颈点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo perf record -g -p &amp;lt;pid&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo perf script | stackcollapse-perf.pl | flamegraph.pl &amp;gt; flamegraph.svg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码分析&lt;/strong&gt;：根据火焰图的分析结果，定位到具体的代码位置，查看是否有逻辑问题，如死循环、高复杂度算法等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖检查&lt;/strong&gt;：检查该进程是否依赖了其他服务或资源，是否存在依赖服务响应慢导致的阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;恢复与优化&#34;&gt;&lt;a href=&#34;#%e6%81%a2%e5%a4%8d%e4%b8%8e%e4%bc%98%e5%8c%96&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;恢复与优化
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;恢复服务&lt;/strong&gt;：如果经过分析确认该进程确实有问题且无法快速修复，可以考虑重启该进程，但在此之前确保有备份和回滚方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化代码&lt;/strong&gt;：根据分析结果，对代码进行优化，减少 CPU 使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源扩展&lt;/strong&gt;：如果是因为资源不足导致的 CPU 飙升，可以考虑增加服务器资源，如 CPU、内存等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;火焰图&#34;&gt;&lt;a href=&#34;#%e7%81%ab%e7%84%b0%e5%9b%be&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;火焰图
&lt;/h2&gt;&lt;p&gt;火焰图工具不是 linux 自带的，需要下载安装。&lt;/p&gt;
&lt;h3 id=&#34;安装-perf-工具&#34;&gt;&lt;a href=&#34;#%e5%ae%89%e8%a3%85-perf-%e5%b7%a5%e5%85%b7&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;安装  &lt;code&gt;perf&lt;/code&gt;  工具
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;perf&lt;/code&gt; 是 Linux 系统中用于性能分析的工具，通常可以通过包管理器安装。&lt;/p&gt;
&lt;h3 id=&#34;下载和安装-flamegraph-工具&#34;&gt;&lt;a href=&#34;#%e4%b8%8b%e8%bd%bd%e5%92%8c%e5%ae%89%e8%a3%85-flamegraph-%e5%b7%a5%e5%85%b7&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;下载和安装 FlameGraph 工具
&lt;/h3&gt;&lt;p&gt;FlameGraph 是由 Brendan Gregg 开发的工具集，用于将 &lt;code&gt;perf&lt;/code&gt; 的输出转换为火焰图。&lt;/p&gt;
&lt;h3 id=&#34;生成火焰图&#34;&gt;&lt;a href=&#34;#%e7%94%9f%e6%88%90%e7%81%ab%e7%84%b0%e5%9b%be&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;生成火焰图
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;perf record&lt;/code&gt; 命令捕获性能数据。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，以下命令会在 60 秒内从所有 CPU 和进程生成性能样本：&lt;/p&gt;
&lt;p&gt;perf record -a -g -F 99 sleep 60&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt;：从所有 CPU 捕获数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-g&lt;/code&gt;：启用调用图收集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-F 99&lt;/code&gt;：每秒采样 99 次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sleep 60&lt;/code&gt;：运行 60 秒后停止捕获。&lt;/p&gt;
&lt;p&gt;2. &lt;strong&gt;将性能数据转换为文本格式&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;perf script &amp;gt; data.perf&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;生成 SVG 格式的火焰图&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 &lt;code&gt;flamegraph.pl&lt;/code&gt; 脚本生成 SVG 格式的火焰图&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>【排坑】云服务器docker部署前后端分离项目&#43;域名解析&#43;OSS</title>
        <link>/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/</link>
        <pubDate>Sun, 26 Jan 2025 12:00:00 +0000</pubDate>
        
        <guid>/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;踩坑推荐&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145285512&#34;  title=&#34;【大坑！已解决】docker容器jar包连不上另一个容器的mysql-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【大坑！已解决】docker 容器 jar 包连不上另一个容器的 mysql-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145290367&#34;  title=&#34;【排坑】程序包jdk.nashorn.internal.ir.debug不存在-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【排坑】程序包 jdk.nashorn.internal.ir.debug 不存在-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145308002&#34;  title=&#34;【已解决】 [ org.apache.catalina.core.StandardService : 173 ] - Stopping service [Tomcat]-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】 [ org.apache.catalina.core.StandardService : 173 ] - Stopping service [Tomcat]-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145339474&#34;  title=&#34;【已解决】redisCache注解失效，没写cacheConfig-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】redisCache 注解失效，没写 cacheConfig-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145346364?sharetype=blogdetail&amp;amp;sharerId=145346364&amp;amp;sharerefer=PC&amp;amp;sharesource=qq_73181349&amp;amp;spm=1011.2480.3001.8118&#34;  title=&#34;【已解决】OSS配置问题-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】OSS 配置问题-CSDN 博客&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;环境工具&#34;&gt;&lt;a href=&#34;#%e7%8e%af%e5%a2%83%e5%b7%a5%e5%85%b7&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;环境工具
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;阿里云服务器 Alibaba Cloud Linux 3.2104 LTS 64 位&lt;/li&gt;
&lt;li&gt;OSS&lt;/li&gt;
&lt;li&gt;域名解析（具体就不写了，怕被 DDOS🤡）&lt;/li&gt;
&lt;li&gt;后端 jar 包 jdk11、springboot 2.6.13&lt;/li&gt;
&lt;li&gt;前端 umimax+antd 系列&lt;/li&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;nginx latest&lt;/li&gt;
&lt;li&gt;redis7.2.4&lt;/li&gt;
&lt;li&gt;etcd3.5.15&lt;/li&gt;
&lt;li&gt;mysql8.0.35&lt;/li&gt;
&lt;li&gt;SSH 客户端 final shell&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql、redis、nginx 等所有项目依赖环境全部部署在 docker 容器中。
mysql、redis 这些，部署完记得在本地连一下看有没有问题，有问题就用 docker logs 看日志或者进容器改配置，服务器记得放开对应端口 ！！&lt;/p&gt;
&lt;p&gt;每部署完一个容器就用 docker ps 看一下 status 和 port，如果是 status 是 restarting 或者 port 没映射上，大概率有问题，另外&lt;strong&gt;注意 cpu 和内存占用&lt;/strong&gt; （final shell 看的很方便），有几次启动容器后 cpu 和内存占用爆满了，服务器都登不上了 🤣&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image.png&#34;
	width=&#34;449&#34;
	height=&#34;1173&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image_hu_7df59b6c85579899.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image_hu_c250829e8015be6a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;38&#34;
		data-flex-basis=&#34;91px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;拉取镜像慢的话可以改 docker 镜像配置，具体看&lt;a class=&#34;link&#34; href=&#34;https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors&#34;  title=&#34;阿里云登录 - 欢迎登录阿里云，安全稳定的云计算服务平台&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;常用-docker-命令&#34;&gt;&lt;a href=&#34;#%e5%b8%b8%e7%94%a8-docker-%e5%91%bd%e4%bb%a4&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;常用 docker 命令
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;docker pull 镜像名    【拉取镜像】&lt;/li&gt;
&lt;li&gt;docker search  镜像名   【搜索镜像】&lt;/li&gt;
&lt;li&gt;docker images 【列出 docker 的所有镜像】&lt;/li&gt;
&lt;li&gt;docker ps（-a） 【列出当前在运行的容器，加上-a 参数列出所有容器，包括停止的】&lt;/li&gt;
&lt;li&gt;docker stop/start 容器 id 【暂停/开始容器运行】&lt;/li&gt;
&lt;li&gt;docker rmi 镜像 id 【删除镜像】&lt;/li&gt;
&lt;li&gt;docker rm（-f）【删除 stop 容器，加上-f 参数可以强制删除 start 容器】&lt;/li&gt;
&lt;li&gt;docker logs 容器 id 【展示出该容器的运行日志】&lt;/li&gt;
&lt;li&gt;docker run 【启动镜像，运行一个容器】&lt;/li&gt;
&lt;li&gt;docker build  【构建镜像】&lt;/li&gt;
&lt;li&gt;docker info 【查看 docker 版本号等信息】&lt;/li&gt;
&lt;li&gt;systemctl status docker 【docker 运行信息】&lt;/li&gt;
&lt;li&gt;docker network 【构建 docker 网络】&lt;/li&gt;
&lt;li&gt;docker exec -it 容器 id  /bin/bash【进入容器内部】&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署-mysql&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2-mysql&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署 mysql
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker pull 拉取 mysql 镜像就不说了，直接运行镜像命令如下&lt;/p&gt;
&lt;p&gt;docker run &amp;ndash;restart=always  &amp;ndash;name blog_mysql --network blog_network  -d  -p 3306:3306  -e TZ=Asia/Shanghai -e MYSQL_ROOT_PASSWORD=xxxx mysql:8.0.35&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解读&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;--restart=always 是每次 docker 服务重启时该容器也自动启动，建议加上，不然每次重启服务器或 docker 时都要手动再启动容器。&lt;/li&gt;
&lt;li&gt;--name 是给该容器命名，&amp;ndash;network 是指定该容器的所属 docker 网络，便于各个容器之间端口通信，&lt;/li&gt;
&lt;li&gt;-d 是后台运行，&lt;/li&gt;
&lt;li&gt;-p 是端口映射，我没每次启动一个容器都相当于开启一个新的小操作系统，需要把这个小操作系统的端口和服务器端口做个映射，这样容器才能和外界交流&lt;/li&gt;
&lt;li&gt;-e 设置环境变量，这里有个坑，如果不指定时区，部署 mysql 后 select now()就会发现&lt;strong&gt;mysql 时间和实际时间差 8h&lt;/strong&gt;，启动时设置下 Asia/Shanghai 即可解决。MYSQL_ROOT_PASSWORD 就是指定 mysql 的连接密码，远程连接要用。&lt;/li&gt;
&lt;li&gt;mysql:8.0.35 就是指明要运行的镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果启动后 mysql 远程连接不了，用 docker logs 查看该容器的日志，一般会有提示&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署-etcd&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2-etcd&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署 etcd
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker run &amp;ndash;restart=always -d &amp;ndash;name blog_etcd --network blog_network  -p 2379:2379  &amp;ndash;env ALLOW_NONE_AUTHENTICATION=yes   &amp;ndash;env   ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379   bitnami/etcd:3.5.15&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解读：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;etcd 以单节点方式启动，设置无需密码，看个人项目是否需要 etcd，不需要就不用部署 etcd&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署-redis&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2-redis&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署 redis
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker run &amp;ndash;restart=always &amp;ndash;name blog_redis --network blog_network -p 6379:6379 -v /data/blog_redis/data:/data   -v  /data/blog_redis/conf/redis.conf:/etc/redis/redis.conf  -d redis:7.2.4 redis-server /etc/redis/redis.conf&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解读&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v 是挂载目录，简单来说就是把服务器的本机目录文件和容器内的某个目录文件做个映射，我把服务器的/data/blog_redis/data 目录映射到了容器内的/data 目录，这个目录用来存 redis 的数据文件，所以需要改 redis.conf 文件中存放数据的配置，我的数据文件存到了/data 下：
&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-3.png&#34;
	width=&#34;1160&#34;
	height=&#34;746&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-3_hu_f5e1906245ac58c9.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-3_hu_e8c6a324efe2eeba.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;373px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;/data/blog_redis/conf/redis.conf:/etc/redis/redis.conf 就是映射配置文件，redis 启动是需要 conf 文件的，我希望 redis 以我规定的 conf 文件启动，所以要也要挂载一下&lt;/li&gt;
&lt;li&gt;有需要的还可以挂载一下日志文件，记得修改 redis.conf&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署后端&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2%e5%90%8e%e7%ab%af&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署后端
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;本地 idea 打 jar 包，然后用 final shell 上传到云服务器，为什么不用阿里的 Workbench 远程连接，因为这个传文件太慢了。&lt;strong&gt;坑！打包时记得看控制台的输出日志有没有黄色警告，具体原因看：&lt;/strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145308002&#34;  title=&#34;【已解决】 [ org.apache.catalina.core.StandardService : 173 ] - Stopping service [Tomcat]-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】 [ org.apache.catalina.core.StandardService : 173 ] - Stopping service [Tomcat]-CSDN 博客&lt;/a&gt;&lt;strong&gt;另外打包时记得改 yml 文件的 mysql 和 redis 的 url，ip 地址不要写 127.0.0.1 或 lcoalhost，要写服务器的公网 ip，不然 jar 包连不上 mysql 和 redis，注意 mysql 数据库大小写具体看这个：&lt;/strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145285512&#34;  title=&#34;【大坑！已解决】docker容器jar包连不上另一个容器的mysql-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【大坑！已解决】docker 容器 jar 包连不上另一个容器的 mysql-CSDN 博客&lt;/a&gt;&lt;br&gt;
yml 文件写的数据库是 Blog，实际数据库是 blog
&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-4.png&#34;
	width=&#34;1684&#34;
	height=&#34;210&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-4_hu_480b67f65753eeb4.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-4_hu_eed6dceb2523c018.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;801&#34;
		data-flex-basis=&#34;1924px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;在 jar 包的同一目录下，创建一个 blog_dockerfile 文件，内容如下：&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM openjdk:11-jre-slim
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN apt-get update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y bash &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/apt/lists/*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;COPY blog-0.0.1-SNAPSHOT.jar /app/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WORKDIR /app
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EXPOSE &lt;span class=&#34;m&#34;&gt;8081&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CMD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;“bash”, “-c”, “java -jar -Duser.timezone&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;GMT+08 blog-0.0.1-SNAPSHOT.jar “&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;解读&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FROM openjdk:11-jre-slim  是下载 jar 包运行需要的 jdk，我只需要 jar 运行环境，所以下了 jre，slim 是基于 Debian/Ubuntu，而 alpine 是基于 centos 的，操作系统倒无所谓，我用两个都部署了 jar 包都能成功。这里我发现 jdk11 要比 jdk8 的镜像包大很多，而且&lt;strong&gt;用 jdk11 docker build 的时候特别慢，甚至会构建失败，用 jdk8 就特别快&lt;/strong&gt; 2. COPY 把当前目录（dockerfile 所在目录）的 jar 包拷贝到容器的/app/目录下 3. WORKDIR 设置工作目录为/app/ 4. EXPOSE 暴露 8081 端口，因为我的 jar 包运行在 8081 端口。他需要和外界通信，所以得暴露出来 5. CMD 就是用 docker run 启动容器后他要执行的命令了，这里有个坑
&lt;strong&gt;-Duser.timezone=GMT+08，启动时指定了时区&lt;/strong&gt;，不指定的话会发现 jar 包的运行日志时间和实际时间差 8h&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker build -f blog_dockerfile -t blog-backend .&lt;br&gt;
写好 dockerfile 后构建镜像，-f 是指定 dockerfile 文件，-t 是构建镜像后的镜像名，.就是当前目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker run &amp;ndash;name blog-backend -d &amp;ndash;restart=always  -v /data/blog_backend/logs:/tmp/logs  --network blog_network  -p 8081:8081  blog-backend:latest&lt;br&gt;
构建完镜像后启动，这里我挂载了日志文件，方便查看日志，如果不挂载的话每次看日志都得进到容器里面，不方便，而且只有容器运行的时候才能进容器内部，如果容器停了就进不去，-p 映射端口，我后端部署在 8081，这里和服务器的 8081 端口做了个映射。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署前端&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2%e5%89%8d%e7%ab%af&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署前端
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本地 vscode 构建，生成的 dist 目录用 final shell 上传到云服务器，同样在 dist 同一目录下建一个 blog_fronted_dockerfile 文件，内容如下：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN rm /etc/nginx/conf.d/default.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ADD default.conf /etc/nginx/conf.d/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EXPOSE &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EXPOSE &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;COPY dist/  /usr/share/nginx/html/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CMD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;“nginx”, “-g”, “daemon off&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;”&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;然后还需要一个 default.conf 来替换 nginx 的默认配置文件，内容如下：
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;listen       80&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#nginx 默认监听 80 端口，可以改成其他的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    server_name  公网 ip&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;#server_name  域名;如果有域名，解析后可以用域名，不用 ip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;location / &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        root   /usr/share/nginx/html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        index  index.html index.htm&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        try_files &lt;span class=&#34;nv&#34;&gt;$uri&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$uri&lt;/span&gt;/ /index.html &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;404&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 后端接口转发&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;location /api/ &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_pass http://公网 ip:8081&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 转发到后端服务 8081 端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_set_header Host &lt;span class=&#34;nv&#34;&gt;$host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_set_header X-Real-IP &lt;span class=&#34;nv&#34;&gt;$remote_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_set_header X-Forwarded-For &lt;span class=&#34;nv&#34;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_set_header X-Forwarded-Proto &lt;span class=&#34;nv&#34;&gt;$scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    error_page   &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;502&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;503&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;504&lt;/span&gt;  /50x.html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; /50x.html &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        root   html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;docker build -f blog_fronted_dockerfile -t blog-fronted .&lt;br&gt;
构建镜像&lt;/li&gt;
&lt;li&gt;docker run &amp;ndash;restart=always -d -p 443:443 -p 80:80  &amp;ndash;name blog_fronted blog-fronted:latest&lt;br&gt;
运行镜像，映射 443 和 80 端口&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;oss-配置&#34;&gt;&lt;a href=&#34;#oss-%e9%85%8d%e7%bd%ae&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;OSS 配置
&lt;/h2&gt;&lt;p&gt;看我这篇文章&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145346364?sharetype=blogdetail&amp;amp;sharerId=145346364&amp;amp;sharerefer=PC&amp;amp;sharesource=qq_73181349&amp;amp;spm=1011.2480.3001.8118&#34;  title=&#34;【已解决】OSS配置问题-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】OSS 配置问题-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;防盗链设置&#34;&gt;&lt;a href=&#34;#%e9%98%b2%e7%9b%97%e9%93%be%e8%ae%be%e7%bd%ae&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;防盗链设置
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我们存储在 oss 的图片通过图片 url 来访问，如果有其他用户拿到了我们的图片 url 进行访问就会刷我们的流量甚至欠费，所以最好设置防盗链，白名单加上前端部署的域名即可&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-1.png&#34;
	width=&#34;2378&#34;
	height=&#34;1271&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-1_hu_8f7daece9232d1f2.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-1_hu_c3d2cb77e1d94263.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;449px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加上防盗链之后我们测试一下，拿着图片 url 在本地浏览器访问，结果如下，因为白名单仅对服务器开放了权限，没有对本地开放，所以本地访问就无权限了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-2.png&#34;
	width=&#34;1905&#34;
	height=&#34;433&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-2_hu_a2ed331837a13a2a.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-2_hu_7771ae1c55897d8f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;439&#34;
		data-flex-basis=&#34;1055px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
