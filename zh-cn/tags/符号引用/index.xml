<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>符号引用 on 青秋博客</title>
        <link>/zh-cn/tags/%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8/</link>
        <description>Recent content in 符号引用 on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Thu, 13 Feb 2025 14:03:21 +0000</lastBuildDate><atom:link href="/zh-cn/tags/%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>符号引用和直接引用、强引用、软引用、弱引用、虚引用</title>
        <link>/zh-cn/post/2025/02/%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8%E5%92%8C%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8%E5%BC%BA%E5%BC%95%E7%94%A8%E8%BD%AF%E5%BC%95%E7%94%A8%E5%BC%B1%E5%BC%95%E7%94%A8%E8%99%9A%E5%BC%95%E7%94%A8/</link>
        <pubDate>Thu, 13 Feb 2025 14:03:21 +0000</pubDate>
        
        <guid>/zh-cn/post/2025/02/%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8%E5%92%8C%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8%E5%BC%BA%E5%BC%95%E7%94%A8%E8%BD%AF%E5%BC%95%E7%94%A8%E5%BC%B1%E5%BC%95%E7%94%A8%E8%99%9A%E5%BC%95%E7%94%A8/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/138463677&#34;  title=&#34;Kafka入门到入土——万字详解，图文并茂_图解kafka-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kafka入门到入土&amp;mdash;&amp;mdash;万字详解，图文并茂_图解kafka-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145463543&#34;  title=&#34;Java内存模型（Memory Model）-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java内存模型（Memory Model）-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/144943507&#34;  title=&#34;ArrayList、LinkedList、HashMap、HashTable、HashSet、TreeSet-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ArrayList、LinkedList、HashMap、HashTable、HashSet、TreeSet-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/144995466&#34;  title=&#34;AQS---抽象队列同步器、CLH锁队列-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AQS&amp;mdash;抽象队列同步器、CLH锁队列-CSDN博客&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://segmentfault.com/a/1190000042313862&#34;  title=&#34;https://segmentfault.com/a/1190000042313862&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://segmentfault.com/a/1190000042313862&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;符号引用&#34;&gt;&lt;a href=&#34;#%e7%ac%a6%e5%8f%b7%e5%bc%95%e7%94%a8&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;符号引用
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;以一组符号来描述所引用的目标。&lt;/li&gt;
&lt;li&gt;符号引用可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可，符号引用和虚拟机的布局无关。&lt;/li&gt;
&lt;li&gt;为什么要有符号引用？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;java类被编译成class文件时，&lt;strong&gt;虚拟机并不知道所引用类的地址，所以就用符号引用来代替&lt;/strong&gt; ，而在&lt;strong&gt;链接的解析阶段&lt;/strong&gt; 就是为了把这个符号引用转化成为&lt;strong&gt;真正的地址即直接引用&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;直接引用&#34;&gt;&lt;a href=&#34;#%e7%9b%b4%e6%8e%a5%e5%bc%95%e7%94%a8&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;直接引用
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;直接引用和虚拟机的布局是相关的，&lt;strong&gt;不同的虚拟机对于相同的符号引用所翻译出来的直接引用一般是不同的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;直接引用可以是指向对象，类变量和类方法的指针、相对偏移量、一个间接定位到对象的句柄。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;强引用&#34;&gt;&lt;a href=&#34;#%e5%bc%ba%e5%bc%95%e7%94%a8&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;强引用
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;把一个对象赋给一个引用变量，如 MikeChen mikechen=new MikeChen();&lt;/p&gt;
&lt;p&gt;在一个方法的内部有一个强引用，这个引用保存在Java栈中，而真正的引用内容(MikeChen)保存在Java堆中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/c9db6ad6662f4908998e5bb8593c072b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果一个对象具有强引用，即使OOM垃圾回收器不会回收该对象，如果强引用对象不使用时，需要弱化从而使GC能够回收，如 mikechen=null;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;软引用soft&#34;&gt;&lt;a href=&#34;#%e8%bd%af%e5%bc%95%e7%94%a8soft&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;软引用（Soft）
&lt;/h2&gt;&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;软引用是一种相对强引用弱化了一些的引用，需要用java.lang.ref.SoftReference 类来实现：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;String str=new String(&amp;#34;abc&amp;#34;); // 强引用
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SoftReference&amp;lt;String&amp;gt; softRef=new SoftReference&amp;lt;String&amp;gt;(str);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;内存不足时就会回收该对象内存，gc不一定回收&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;弱引用weak&#34;&gt;&lt;a href=&#34;#%e5%bc%b1%e5%bc%95%e7%94%a8weak&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;弱引用（Weak）
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不管内存是否足够，只要发生 GC，都会被回收。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用System.gc()方法只是起通知作用，不一定立刻gc&lt;/strong&gt;，JVM的gc时机由JVM自己的状态决定。&lt;/p&gt;
&lt;p&gt;比如ThreadLocal的静态内部类Entry就继承了弱引用，ThreadLocalMap使用ThreadLocal的弱引用作为key，GC时这个ThreadLocal势必会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，也就造成内存泄漏。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;虚引用phantom&#34;&gt;&lt;a href=&#34;#%e8%99%9a%e5%bc%95%e7%94%a8phantom&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;虚引用（Phantom）
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;虚引用（Phantom Reference）是Java中最弱的引用类型，&lt;strong&gt;无法通过引用直接获取到对象实例&lt;/strong&gt; 。虚引用主要用于&lt;strong&gt;跟踪对象被垃圾回收的状态&lt;/strong&gt;。当一个对象只被虚引用关联时，其实际上并不影响对象的生命周期，也就是说，垃圾回收器随时可能回收被虚引用关联的对象。&lt;/p&gt;&lt;/blockquote&gt;
&lt;br /&gt;
---
</description>
        </item>
        
    </channel>
</rss>
