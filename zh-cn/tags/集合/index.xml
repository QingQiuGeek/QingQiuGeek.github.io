<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>集合 on 青秋博客</title>
        <link>/zh-cn/tags/%E9%9B%86%E5%90%88/</link>
        <description>Recent content in 集合 on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Tue, 11 Feb 2025 12:00:00 +0000</lastBuildDate><atom:link href="/zh-cn/tags/%E9%9B%86%E5%90%88/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ArrayList、LinkedList、HashMap、HashTable、HashSet、TreeSet</title>
        <link>/zh-cn/post/2025/02/arraylistlinkedlisthashmaphashtablehashsettreeset/</link>
        <pubDate>Tue, 11 Feb 2025 12:00:00 +0000</pubDate>
        
        <guid>/zh-cn/post/2025/02/arraylistlinkedlisthashmaphashtablehashsettreeset/</guid>
        <description>&lt;h4 id=&#34;数组与集合区别-用过哪些&#34;&gt;&lt;a href=&#34;#%e6%95%b0%e7%bb%84%e4%b8%8e%e9%9b%86%e5%90%88%e5%8c%ba%e5%88%ab-%e7%94%a8%e8%bf%87%e5%93%aa%e4%ba%9b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;数组与集合区别
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;数组固定长度，集合动态改变&lt;/p&gt;
&lt;p&gt;数组可以包含基本数据类型，集合只能包含对象&lt;/p&gt;
&lt;p&gt;数组可以直接访问元素，集合需要通过迭代器或其他方法访问&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;集合族谱&#34;&gt;&lt;a href=&#34;#%e9%9b%86%e5%90%88%e6%97%8f%e8%b0%b1&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;集合族谱
&lt;/h2&gt;&lt;p&gt;在这些集合中，仅有vector和hashtable是线程安全的，其内部方法基本都有synchronized修饰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/303b6a20273f4faeb4c1081238191983.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;arraylist&#34;&gt;&lt;a href=&#34;#arraylist&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;ArrayList
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;底层采用Object数组实现，实现了RandomAccess接口因此支持随机访问。插入删除操作效率慢。&lt;/p&gt;
&lt;p&gt;ArrayList需要一份连续的内存空间。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;arraylist扩容机制&#34;&gt;&lt;a href=&#34;#arraylist%e6%89%a9%e5%ae%b9%e6%9c%ba%e5%88%b6&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;ArrayList扩容机制
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;ArrayList添加元素时，若达到了内部数组指定的数量上限，会自动进行扩容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算新容量，一般是原容量的1.5倍（1.5 倍，是因为 1.5 可以充分利用移位操作，减少浮点数或者运算时间和运算次数）&lt;/li&gt;
&lt;li&gt;根据新容量创建新数组&lt;/li&gt;
&lt;li&gt;把原来的数据拷贝到新数组中&lt;/li&gt;
&lt;li&gt;更新ArrayList内部指向原数组的引用，指向新数组&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;arraylist哪里不安全&#34;&gt;&lt;a href=&#34;#arraylist%e5%93%aa%e9%87%8c%e4%b8%8d%e5%ae%89%e5%85%a8&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;ArrayList哪里不安全
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;首先，对arraylist添加一个元素，分为3步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断数组是否需要扩容，如果需要就调用grow方法扩容；&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;ul&gt;
&lt;li&gt;将数组的size位置设置值（因为数组的下标是从0开始的）；&lt;/li&gt;
&lt;li&gt;将当前集合的大小+1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多线程插入删除下，ArrayList会暴露三个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出现null值：&lt;br&gt;
假设arraylist容量为10，线程1检查当前size=4，不需要扩容，于是在index=4进行插入，但是还没有size++，线程2又来进行插入，检查不需要扩容且size=4，于是也在index=4执行插入，然后两个线程同时执行size++，就导致实际size=6，两次插入都在index=4，而index=5的地方并没有插入数据。&lt;/li&gt;
&lt;li&gt;索引越界异常&lt;br&gt;
还是上述例子，假设线程1检查size=9，没有到10，无需扩容，于是在index=9的地方插入，但还没有size++，线程2来检查size=9，也在index=9的地方插入，然后两个线程同时++，导致size=11。&lt;/li&gt;
&lt;li&gt;集合的size()和实际add数量不符&lt;br&gt;
size++不&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
