<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Synchronized锁升级 on 青秋博客</title>
        <link>/zh-cn/tags/synchronized%E9%94%81%E5%8D%87%E7%BA%A7/</link>
        <description>Recent content in Synchronized锁升级 on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Thu, 16 Jan 2025 12:00:00 +0000</lastBuildDate><atom:link href="/zh-cn/tags/synchronized%E9%94%81%E5%8D%87%E7%BA%A7/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>synchronized锁升级</title>
        <link>/zh-cn/post/2025/01/synchronized%E9%94%81%E5%8D%87%E7%BA%A7/</link>
        <pubDate>Thu, 16 Jan 2025 12:00:00 +0000</pubDate>
        
        <guid>/zh-cn/post/2025/01/synchronized%E9%94%81%E5%8D%87%E7%BA%A7/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/144983050&#34;  title=&#34;Java io模型-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java io模型-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/144992720&#34;  title=&#34;如何设计一个能根据任务优先级来执行的线程池-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何设计一个能根据任务优先级来执行的线程池-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/144995716&#34;  title=&#34;Web实时消息推送的几种方案_setmessageinnerhtml is not defined-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Web实时消息推送的几种方案_setmessageinnerhtml is not defined-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145097445&#34;  title=&#34;yum、dnf、apt包管理工具-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;yum、dnf、apt包管理工具-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/144810289?sharetype=blogdetail&amp;amp;sharerId=144810289&amp;amp;sharerefer=PC&amp;amp;sharesource=qq_73181349&amp;amp;spm=1011.2480.3001.8118&#34;  title=&#34;Java反射、静态代理、动态代理-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java反射、静态代理、动态代理-CSDN博客&lt;/a&gt;
在jdk1.5版本（包含）之前，锁的状态只有两种状态：无锁状态和重量级锁状态，只要有线程访问共享资源对象，则锁直接成为重量级锁，jdk1.6版本后，对synchronized锁进行了优化，新加了&amp;quot;偏向锁&amp;quot;和&amp;quot;轻量级锁&amp;quot;，用来减少上下文的切换以提高性能，所以锁就有了4种状态。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;无锁&lt;/strong&gt;&lt;br&gt;
对于共享资源，不涉及多线程的竞争访问。在DK1.6之后偏向锁的默认开启的，但是有一个偏向延迟，需要在VM启动之后的多少秒之后才能开启，这个可以通过VM参数进行设置，同时是否开启偏向锁也可以通过VM参数设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;偏向锁&lt;/strong&gt;&lt;br&gt;
共享资源&lt;strong&gt;首次被访问时&lt;/strong&gt; ，JVM会对该共享资源对象做一些设置，比如将对象头中是否偏向锁标志位置为1，对象头中的线程ID设置为当前线程ID（注意：这里是操作系统的线程ID），后续当前线程再次访问这个共享资源时，会根据偏向锁标识跟线程ID进行比对是否相同，比对成功则直接获取到锁（锁偏向于这个线程），进入&lt;strong&gt;临界区域&lt;/strong&gt; （就是被锁保护，线程间只能串行访问的代码），这也是&lt;strong&gt;synchronized锁的可重入功能&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轻量级锁&lt;/strong&gt;&lt;br&gt;
当多个线程同时申请共享资源锁的访问时，这就产生了竞争，JVM会先尝试使用轻量级锁，以&lt;strong&gt;CAS方式&lt;/strong&gt; 来获取锁（一般就是自旋加锁，&lt;strong&gt;不阻塞线程采用循环等待&lt;/strong&gt; 的方式），成功则获取到锁，状态为轻量级锁，&lt;strong&gt;轻量级锁竞争失败（达到一定的自旋次数还未成功）则锁升级到重量级锁。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重量级锁&lt;/strong&gt;&lt;br&gt;
如果共享资源锁已经被某个线程持有，此时是偏向锁状态，**未释放锁前，再有其他线程来竞争时，则会升级到重量级锁，把竞争线程挂起，**重量级锁由操作系统来实现，所以性能消耗相对较高。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/9737e7ed11d148cd8b2640d255054aa5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;synchronized-和-volatile区别&#34;&gt;&lt;a href=&#34;#synchronized-%e5%92%8c-volatile%e5%8c%ba%e5%88%ab&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;&lt;code&gt;synchronized&lt;/code&gt; 和 &lt;code&gt;volatile区别&lt;/code&gt;
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;synchronized&lt;/code&gt; 关键字和 &lt;code&gt;volatile&lt;/code&gt; 关键字是两个互补的而非对立的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;volatile&lt;/code&gt; 关键字是线程同步的&lt;strong&gt;轻量级&lt;/strong&gt; 实现，所以 &lt;code&gt;volatile&lt;/code&gt;性能肯定比&lt;code&gt;synchronized&lt;/code&gt;关键字要好 。但是 &lt;code&gt;volatile&lt;/code&gt; &lt;strong&gt;关键字只能用于变量&lt;/strong&gt; 而 &lt;code&gt;synchronized&lt;/code&gt; 关键字可以修饰方法以及代码块 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile&lt;/code&gt; 关键字能保证数据的可见性，&lt;strong&gt;但不能保证数据的原子性&lt;/strong&gt; 。&lt;code&gt;synchronized&lt;/code&gt; 关键字两者都能保证。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile&lt;/code&gt;关键字主要用于解决变量在多个线程之间的可见性，同时防止指令重排序。而 &lt;code&gt;synchronized&lt;/code&gt; 关键字解决的是多个线程之间访问资源的同步性。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;br /&gt;
&lt;br /&gt;
---
</description>
        </item>
        
    </channel>
</rss>
