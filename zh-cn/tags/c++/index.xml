<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>C&#43;&#43; on 青秋博客</title>
        <link>/zh-cn/tags/c&#43;&#43;/</link>
        <description>Recent content in C&#43;&#43; on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Fri, 04 Aug 2023 22:32:09 +0000</lastBuildDate><atom:link href="/zh-cn/tags/c++/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>const使用及意义-----const int* p和int* const p</title>
        <link>/zh-cn/post/2023/08/const%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%84%8F%E4%B9%89-----const-int-p%E5%92%8Cint-const-p/</link>
        <pubDate>Fri, 04 Aug 2023 22:32:09 +0000</pubDate>
        
        <guid>/zh-cn/post/2023/08/const%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%84%8F%E4%B9%89-----const-int-p%E5%92%8Cint-const-p/</guid>
        <description>&lt;h2 id=&#34;1修饰变量&#34;&gt;&lt;a href=&#34;#1%e4%bf%ae%e9%a5%b0%e5%8f%98%e9%87%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;1.修饰变量
&lt;/h2&gt;&lt;h3 id=&#34;11const-int-p&#34;&gt;&lt;a href=&#34;#11const-int-p&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;1.1.const int* p
&lt;/h3&gt;&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;int n=10;
int m=20;
const int* p=&amp;amp;m;
//此时const修饰 *p，也就是p保存的地址里面的值不能改变，若*p=60，则会报错
但是可以改变p存放的地址：
p=&amp;amp;n;
printf(&amp;quot;%d&amp;quot;,*p);//打印结果是10
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12-int-const-p&#34;&gt;&lt;a href=&#34;#12-int-const-p&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;1.2. int* const p
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;int n=10;
int m=20;
int* const p=&amp;amp;n;
//此时const只修饰p，也就是p的值只能为&amp;amp;n，无法修改，若p=&amp;amp;m 会报错
但是可以改变*p的值：
*p=60;
//虽然p存放的&amp;amp;n无法修改，但是*p得到的n的值可以修改为60
printf(&amp;quot;*p=%d,n=&amp;quot;,*p,n);//打印结果为60，60
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2修饰函数&#34;&gt;&lt;a href=&#34;#2%e4%bf%ae%e9%a5%b0%e5%87%bd%e6%95%b0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;2.修饰函数
&lt;/h2&gt;&lt;h3 id=&#34;21修饰函数的形参&#34;&gt;&lt;a href=&#34;#21%e4%bf%ae%e9%a5%b0%e5%87%bd%e6%95%b0%e7%9a%84%e5%bd%a2%e5%8f%82&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;2.1.修饰函数的形参
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;void StringCopy(char* dest, const char* src);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个字符串copy函数中，把src指向的字符串复制到dest中，也就是src的值是不需要改变的，而dest指针指向的值改变。对*src加上const后就可以防止其中的值被修改，起到保护作用。&lt;/p&gt;
&lt;p&gt;而起到保护作呕也能够的原因是：&lt;/p&gt;
&lt;p&gt;在实参中，指针会指向一段内存地址，调用函数之后，函数会产生一个临时指针变量，这个临时指针变量的地址与实参的地址不同，但却指向同一块空间地址。那么**形参加上const 修饰之后，保护了这一块内存地址不被修改，如果刻意修改这一块内存，编译器会报错。当然，如果使用c++中的引用，效率会比指针更高，因为引用本身是一个变量，而这个变量仅仅是另外一个变量的别名，它不是指针，不占用内存空间，不会产生临时指针变量，并且不存在NULL空引用，无需assert，比指针更安全。**同时，理论上指针的级数没有限制;但引用只有一级。&lt;/p&gt;
&lt;p&gt;即不存在引用的引用，但可以有指针的指针。&lt;/p&gt;
&lt;h3 id=&#34;22修饰函数的返回值&#34;&gt;&lt;a href=&#34;#22%e4%bf%ae%e9%a5%b0%e5%87%bd%e6%95%b0%e7%9a%84%e8%bf%94%e5%9b%9e%e5%80%bc&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;2.2.修饰函数的返回值
&lt;/h3&gt;&lt;p&gt;如果用const修饰返回值类型为指针，那么函数返回值（即指针）的内容不能被修改，该返回值只能被赋给加const 修饰的同类型指针。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const char * GetString(void);
//const修饰的函数返回值类型是char*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;char *str = GetString();//报错，没有const修饰

const char *str = GetString();//正确
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
---
</description>
        </item>
        
    </channel>
</rss>
