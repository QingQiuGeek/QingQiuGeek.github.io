<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>虚拟机 on 青秋博客</title>
        <link>/zh-cn/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
        <description>Recent content in 虚拟机 on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Thu, 06 Feb 2025 12:00:00 +0000</lastBuildDate><atom:link href="/zh-cn/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>JVM图文入门</title>
        <link>/zh-cn/post/2025/02/jvm%E5%9B%BE%E6%96%87%E5%85%A5%E9%97%A8/</link>
        <pubDate>Thu, 06 Feb 2025 12:00:00 +0000</pubDate>
        
        <guid>/zh-cn/post/2025/02/jvm%E5%9B%BE%E6%96%87%E5%85%A5%E9%97%A8/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;{#tableOfContents}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145339474&#34;  title=&#34;【已解决】redisCache注解失效，没写cacheConfig_com.howbuy.cachemanagement.client.redisclient#incr-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】redisCache注解失效，没写cacheConfig_com.howbuy.cachemanagement.client.redisclient#incr-CSDN博客&lt;/a&gt;{#tableOfContents}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145346364&#34;  title=&#34;【已解决】OSS配置问题_keyuewenhua.oss-cn-beijing.aliyuncs-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】OSS配置问题_keyuewenhua.oss-cn-beijing.aliyuncs-CSDN博客&lt;/a&gt;{#tableOfContents}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145355561&#34;  title=&#34;【排坑】云服务器docker部署前后端分离项目&amp;#43;域名解析&amp;#43;OSS-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【排坑】云服务器docker部署前后端分离项目+域名解析+OSS-CSDN博客&lt;/a&gt;{#tableOfContents}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145444729&#34;  title=&#34;微服务概念入门：Nacos、OpenFeign、Sentinel、GateWay、Seata-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;微服务概念入门：Nacos、OpenFeign、Sentinel、GateWay、Seata-CSDN博客&lt;/a&gt;{#tableOfContents}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145461986&#34;  title=&#34;字符串常量池-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;字符串常量池-CSDN博客&lt;/a&gt;{#tableOfContents}&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;{#main-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#main-toc&#34; &gt;1. JVM8结构图&lt;/a&gt;{#main-toc-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Java%E6%80%A7%E8%83%BD%E4%BD%8E%E7%9A%84%E8%80%8C%E4%B8%BB%E8%A6%81%E5%8E%9F%E5%9B%A0&#34; &gt;2. Java性能低的主要原因&lt;/a&gt;{#Java%E6%80%A7%E8%83%BD%E4%BD%8E%E7%9A%84%E8%80%8C%E4%B8%BB%E8%A6%81%E5%8E%9F%E5%9B%A0-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6&#34; &gt;3. 字节码文件&lt;/a&gt;{#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%84%E6%88%90&#34; &gt;3.1 字节码文件的组成&lt;/a&gt;{#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%84%E6%88%90-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#5.%20JVM%E6%9E%B6%E6%9E%84&#34; &gt;4. JVM架构&lt;/a&gt;{#5.%20JVM%E6%9E%B6%E6%9E%84-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8ClassLoader&#34; &gt;4.1 类加载器ClassLoader&lt;/a&gt;{#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8ClassLoader-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA&#34; &gt;4.2 运行时数据区&lt;/a&gt;{#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8&#34; &gt;程序计数器&lt;/a&gt;{#%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Java%E6%96%B9%E6%B3%95%E6%A0%88%EF%BC%88%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%EF%BC%89&#34; &gt;Java虚拟机栈（方法栈）&lt;/a&gt;{#Java%E6%96%B9%E6%B3%95%E6%A0%88%EF%BC%88%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%EF%BC%89-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88%C2%A0&#34; &gt;本地方法栈&lt;/a&gt;{#%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88%C2%A0-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Heap%E5%A0%86&#34; &gt;堆&lt;/a&gt;{#Heap%E5%A0%86-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E&#34; &gt;4.3 执行引擎&lt;/a&gt;{#%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE&#34; &gt;5. 双亲委派&lt;/a&gt;{#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E7%A0%B4%E5%9D%8F%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE&#34; &gt;5.1 破坏双亲委派&lt;/a&gt;{#%E7%A0%B4%E5%9D%8F%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Tomcat%E7%A0%B4%E5%9D%8F&#34; &gt;Tomcat破坏&lt;/a&gt;{#Tomcat%E7%A0%B4%E5%9D%8F-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#JDBC%E7%A0%B4%E5%9D%8F%C2%A0&#34; &gt;JDBC破坏&lt;/a&gt;{#JDBC%E7%A0%B4%E5%9D%8F%C2%A0-toc}&lt;/p&gt;
&lt;hr&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;JVM8结构图 {#main-toc}&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/973e296f2ad5024e006d26c79d9f2d27.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Java性能低的主要原因 {#Java%E6%80%A7%E8%83%BD%E4%BD%8E%E7%9A%84%E8%80%8C%E4%B8%BB%E8%A6%81%E5%8E%9F%E5%9B%A0}&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Java语言如果不做任何的优化，性能其实是不如C和C++语言的。主要原因是：&lt;/p&gt;
&lt;p&gt;在程序运行过程中，Java虚拟机需要将字节码指令&lt;strong&gt;实时&lt;/strong&gt; 地解释成计算机能识别的机器码，这个过程在运行时可能会&lt;strong&gt;反复执行&lt;/strong&gt;，所以效率较低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/77956ae94eb35c711fe6ae90215b9e65.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;C和C++语言在执行过程中，只需将源代码编译成可执行文件，就包含了计算机能识别的机器码，无需在运行过程中再实时地解释，所以性能较高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/4891e09006dbffd15576105091139111.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Java为什么要选择一条执行效率比较低的方式呢？主要是为了实现&lt;strong&gt;跨平台&lt;/strong&gt;的特性。Java的字节码指令，如果希望在不同平台（操作系统+硬件架构），比如在windows或者linux上运行。可以使用同一份字节码指令，交给windows和linux上的Java虚拟机进行解释，这样就可以获得不同平台上的机器码了。这样就实现了Write Once，Run Anywhere 编写一次，到处运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/26d4cec4bed87ef7639e8cabaee78e9a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;字节码文件 {#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6}&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/ad540780ab9b2f156f1b85a26cd16701.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们java中说的字节码文件即 java代码编译后的.class文件，class文件可以跨平台运行在不同操作系统的JVM上。&lt;/p&gt;
&lt;h3 id=&#34;31-字节码文件的组成-e5ad97e88a82e7a081e69687e4bbb6e79a84e7bb84e68890&#34;&gt;&lt;a href=&#34;#31-%e5%ad%97%e8%8a%82%e7%a0%81%e6%96%87%e4%bb%b6%e7%9a%84%e7%bb%84%e6%88%90-e5ad97e88a82e7a081e69687e4bbb6e79a84e7bb84e68890&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;3.1 字节码文件的组成 {#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%84%E6%88%90}
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;字节码文件总共可以分为以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基础信息&lt;/strong&gt;：魔数、字节码文件对应的Java版本号、访问标识(public final等等)、父类和接口信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;常量池&lt;/strong&gt; **：**保存了字符串常量、类或接口名、字段名，主要在字节码指令中使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字段：&lt;/strong&gt; 当前类或接口声明的字段信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**方法：**当前类或接口声明的方法信息，核心内容为方法的字节码指令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**属性：**类的属性，比如源码的文件名、内部类的列表等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;JVM架构 {#5.%20JVM%E6%9E%B6%E6%9E%84}&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;根据上面的JVM图，JVM大致可分为三块： 类加载器ClassLoader、运行时数据区 、执行引擎&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;41-类加载器classloader-e7b1bbe58aa0e8bdbde599a8classloader&#34;&gt;&lt;a href=&#34;#41-%e7%b1%bb%e5%8a%a0%e8%bd%bd%e5%99%a8classloader-e7b1bbe58aa0e8bdbde599a8classloader&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;4.1 类加载器ClassLoader {#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8ClassLoader}
&lt;/h3&gt;&lt;p&gt;类加载器会通过二进制流的方式获取到字节码文件并交给Java虚拟机，虚拟机会在方法区和堆上生成对应的对象保存字节码信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;根加载器（启动类加载器）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认加载Java安装目录/jre/lib下的类文件，比如rt.jar，tools.jar，resources.jar等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扩展类加载器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认加载Java安装目录/jre/lib/ext下的类文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用程序类加载器（系统类加载器）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认加载的是项目中的类以及通过maven引入的第三方jar包中的类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户自定义类加载器&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/03e97036e8ac7a1f4571a63072af659d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出为null是因为根加载器的具体实现是由C或C++编写，不在java范围内。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;42-运行时数据区-e8bf90e8a18ce697b6e695b0e68daee58cba&#34;&gt;&lt;a href=&#34;#42-%e8%bf%90%e8%a1%8c%e6%97%b6%e6%95%b0%e6%8d%ae%e5%8c%ba-e8bf90e8a18ce697b6e695b0e68daee58cba&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;4.2 运行时数据区 {#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA}
&lt;/h3&gt;&lt;p&gt;运行时数据可以划分为以下5块&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/cf125a3e73d0f0285c20eb26d0ed68a0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;程序计数器-e7a88be5ba8fe8aea1e695b0e599a8&#34;&gt;&lt;a href=&#34;#%e7%a8%8b%e5%ba%8f%e8%ae%a1%e6%95%b0%e5%99%a8-e7a88be5ba8fe8aea1e695b0e599a8&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;程序计数器 {#%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8}
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;每个线程都有一个私有的程序计数器，也就是一个指针，指向方法区中的方法字节码（用来存储指向指令的地址）。解释器会在工作的时候改变这个计数器的值来选取下一条需要执行的字节码指令。如果线程执行的是非本地方法，则程序计数器中保存的是当前需要执行的指令地址；如果线程执行的是本地方法，则程序计数器中的值是 undefined。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;java虚拟机栈方法栈-javae696b9e6b395e6a088efbc88e8999ae68b9fe69cbae6a088efbc89&#34;&gt;&lt;a href=&#34;#java%e8%99%9a%e6%8b%9f%e6%9c%ba%e6%a0%88%e6%96%b9%e6%b3%95%e6%a0%88-javae696b9e6b395e6a088efbc88e8999ae68b9fe69cbae6a088efbc89&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Java虚拟机栈（方法栈） {#Java%E6%96%B9%E6%B3%95%E6%A0%88%EF%BC%88%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%EF%BC%89}
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;栈中没有垃圾回收的，线程结束后内存会自动释放。栈主管程序运行、生命周期、线程同步。&lt;/p&gt;
&lt;p&gt;Java 虚拟机栈中是一个个栈帧，每个栈帧对应一个被调用的方法，当线程执行一个方法时，会创建一个对应的栈帧，并将栈帧压入栈中。当方法执行完毕后，将栈帧从栈中弹出。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;栈帧及组成&lt;/strong&gt;{#%E6%A0%88%E5%B8%A7}&lt;/p&gt;
&lt;blockquote&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;局部变量表，局部变量表的作用是在运行过程中存放所有的局部变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作数栈，操作数栈是栈帧中虚拟机在执行指令过程中用来存放临时数据的一块区域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;帧数据，帧数据主要包含动态链接、方法出口、异常表的引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/c18bc4bce68bc763c9b8a7118d9dfad7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;​&lt;/p&gt;
&lt;p&gt;stack1的方法结束后要弹出栈，此时需要通过stack1返回下面的stack2的方法。&lt;/p&gt;
&lt;h4 id=&#34;本地方法栈-e69cace59cb0e696b9e6b395e6a088c2a0&#34;&gt;&lt;a href=&#34;#%e6%9c%ac%e5%9c%b0%e6%96%b9%e6%b3%95%e6%a0%88-e69cace59cb0e696b9e6b395e6a088c2a0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;本地方法栈 {#%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88%C2%A0}
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Java虚拟机栈存储了Java方法调用时的栈帧，而本地方法栈存储的是native本地方法的栈帧&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;堆-heape5a086&#34;&gt;&lt;a href=&#34;#%e5%a0%86-heape5a086&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;堆 {#Heap%E5%A0%86}
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printTotalScore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printAverageScore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;李四&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printTotalScore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printAverageScore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这段代码中通过&lt;code&gt;new&lt;/code&gt;关键字创建了两个&lt;code&gt;Student&lt;/code&gt;类的对象，这两个对象会被存放在堆上。在栈上通过&lt;code&gt;s1&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;两个局部变量保存堆上两个对象的地址，从而实现了引用关系的建立。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/16822dbd8227cfa12045c5f5a6197733.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;​&lt;/p&gt;
&lt;p&gt;以前的Java 中&amp;quot;几乎&amp;quot;所有的对象都会在堆中分配，但随着JIT编译器的发展和逃逸技术的逐渐成熟，所有的对象都分配到堆上渐渐变得不那么&amp;quot;绝对&amp;quot;了。从 JDK 7 开始，Java 虚拟机已经默认开启逃逸分析了，意味着如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存。&lt;strong&gt;垃圾指JVM中没有任何引用指向它的对象&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;逃逸分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逃逸分析&lt;/strong&gt;是一种编译器优化技术，用于判断对象的作用域和生命周期。如果编译器确定一个对象不会逃逸出方法或线程的范围，它可以选择在栈上分配这个对象，而不是在堆上。这样做可以减少垃圾回收的压力，并提高性能。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;一个JVM实例只有一个堆内存&lt;/strong&gt;，堆内存大小可以调节，类加载器读取类文件后要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，堆内存在逻辑上分为三部分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新生代：伊甸区、幸存0区 from、幸存1区 to&lt;/li&gt;
&lt;li&gt;老年代&lt;/li&gt;
&lt;li&gt;永久代&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/751a0755fcb54d798939dec2078b28b2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/f931f0f0a561433b9003820a2c3e5343.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;43-执行引擎-e689a7e8a18ce5bc95e6938e&#34;&gt;&lt;a href=&#34;#43-%e6%89%a7%e8%a1%8c%e5%bc%95%e6%93%8e-e689a7e8a18ce5bc95e6938e&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;4.3 执行引擎 {#%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E}
&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;双亲委派 {#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE}&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;应用程序类加载器（又叫系统类加载器）收到类的加载请求先检查自己是否加载过该类，如果没有，将请求向上委托给自己的父类加载器（extensionLoader），如果父类加载器也没有加载过该类，该父类加载器继续向上委托给自己的父类加载器（bootstrapLoader，又叫根加载器、启动类加载器）若启动类加载器也没有加载过该类，则会根据要加载的类的全限定名尝试加载该类，若加载成功，则返回引用，若加载失败，则抛出异常，并反向委托给扩展类加载器，若仍加载失败，则继续抛出异常，并反向委托给应用程序类加载器，若仍加载失败，则报异常ClassNotFound。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/cf60d86b5fc6576cb316267637d834d2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;​&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/e7ed992419dd7bca322104bd6a121d27.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;​&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/aafc08916de8c9f5a6e2910c33ddfdd6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;​&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;安全性和沙箱机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于java核心库和扩展库由根加载器加载，这些库中的类有更高的安全级别，而应用程序类由应用程序类加载器加载，安全级别低，双亲向上委派可以防止核心API被篡改，提高了程序安全性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是沙箱？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;java安全模型的核心就是java沙箱，沙箱是一个限制程序运行的环境，沙箱机制就是把java代码限定在jvm的特定运行范围内，严格限制代码对本地系统资源的访问（CPU、内存、文件系统、网络等），通过这样来保证代码的有效隔离，防止对本地系统造成破坏。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免类重复加载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于父类加载器加载类时会优先尝试加载，若类已经被加载过，就不会再次加载，避免了类重复加载。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;51-破坏双亲委派-e7a0b4e59d8fe58f8ce4bab2e5a794e6b4be&#34;&gt;&lt;a href=&#34;#51-%e7%a0%b4%e5%9d%8f%e5%8f%8c%e4%ba%b2%e5%a7%94%e6%b4%be-e7a0b4e59d8fe58f8ce4bab2e5a794e6b4be&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;5.1 破坏双亲委派 {#%E7%A0%B4%E5%9D%8F%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE}
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;打破双亲委派机制历史上有三种方式，但本质上只有&lt;strong&gt;第一种&lt;/strong&gt;算是真正的打破了双亲委派机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自定义类加载器并且重写loadClass方法。Tomcat通过这种方式实现应用之间类隔离。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程上下文类加载器。利用上下文类加载器加载类，比如JDBC和JNDI等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Osgi框架的类加载器。历史上Osgi框架实现了一套新的类加载器机制，允许同级之间委托进行类的加载，目前很少使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;tomcat破坏-tomcate7a0b4e59d8f&#34;&gt;&lt;a href=&#34;#tomcat%e7%a0%b4%e5%9d%8f-tomcate7a0b4e59d8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Tomcat破坏 {#Tomcat%E7%A0%B4%E5%9D%8F}
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/e9959398d5270c635d04715341e669a5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;​&lt;/p&gt;
&lt;h4 id=&#34;jdbc破坏-jdbce7a0b4e59d8fc2a0&#34;&gt;&lt;a href=&#34;#jdbc%e7%a0%b4%e5%9d%8f-jdbce7a0b4e59d8fc2a0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;JDBC破坏 {#JDBC%E7%A0%B4%E5%9D%8F%C2%A0}
&lt;/h4&gt;&lt;p&gt;JDBC中使用了DriverManager来管理项目中引入的不同数据库的驱动，比如mysql驱动、oracle驱动。DriverManager类位于rt.jar包中，由启动类加载器加载。依赖中的mysql驱动对应的类，由应用程序类加载器来加载。DriverManager属于rt.jar是启动类加载器加载的。而用户jar包中的驱动需要由应用类加载器加载，&lt;em&gt;这就违反了双亲委派机制&lt;/em&gt; 。&lt;strong&gt;存疑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/93679b9db65beff9fd47dac2d92a139d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;​&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JDBC案例中真的打破了双亲委派机制吗？{#JDBC%E6%A1%88%E4%BE%8B%E4%B8%AD%E7%9C%9F%E7%9A%84%E6%89%93%E7%A0%B4%E4%BA%86%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%E5%90%97%EF%BC%9F}&lt;/p&gt;
&lt;p&gt;最早这个论点提出是在周志明《深入理解Java虚拟机》中，他认为打破了双亲委派机制，这种由启动类加载器加载的类，委派应用程序类加载器去加载类的方式，所以打破了双亲委派机制。&lt;/p&gt;
&lt;p&gt;但是如果我们分别从DriverManager以及驱动类的加载流程上分析，JDBC只是在DriverManager加载完之后，通过初始化阶段触发了驱动类的加载，类的加载依然遵循双亲委派机制。&lt;/p&gt;
&lt;p&gt;所以我认为这里没有打破双亲委派机制，只是用一种巧妙的方法让启动类加载器加载的类，去引发的其他类的加载。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
