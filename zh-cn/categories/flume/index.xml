<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Flume on 青秋博客</title>
        <link>/zh-cn/categories/flume/</link>
        <description>Recent content in Flume on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Sun, 28 Apr 2024 21:47:38 +0000</lastBuildDate><atom:link href="/zh-cn/categories/flume/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Flume进阶--万字详解【老大爷也能学会】</title>
        <link>/zh-cn/post/2024/04/flume%E8%BF%9B%E9%98%B6--%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3%E8%80%81%E5%A4%A7%E7%88%B7%E4%B9%9F%E8%83%BD%E5%AD%A6%E4%BC%9A/</link>
        <pubDate>Sun, 28 Apr 2024 21:47:38 +0000</pubDate>
        
        <guid>/zh-cn/post/2024/04/flume%E8%BF%9B%E9%98%B6--%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3%E8%80%81%E5%A4%A7%E7%88%B7%E4%B9%9F%E8%83%BD%E5%AD%A6%E4%BC%9A/</guid>
        <description>&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;{#main-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BA%8B%E5%8A%A1%EF%BC%88Put%E3%80%81Take%EF%BC%89&#34; &gt;事务（Put、Take）&lt;/a&gt;{#%E4%BA%8B%E5%8A%A1%EF%BC%88Put%E3%80%81Take%EF%BC%89-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86&#34; &gt;架构原理&lt;/a&gt;{#%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Channel%E9%80%89%E6%8B%A9%E5%99%A8&#34; &gt;Channel选择器&lt;/a&gt;{#Channel%E9%80%89%E6%8B%A9%E5%99%A8-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#SinkProcessor&#34; &gt;SinkProcessor&lt;/a&gt;{#SinkProcessor-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84&#34; &gt;拓扑结构&lt;/a&gt;{#%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%8D%95%E6%BA%90%E5%A4%9A%E5%87%BA%E5%8F%A3%E6%A1%88%E4%BE%8B&#34; &gt;单源多出口案例&lt;/a&gt;{#%E5%8D%95%E6%BA%90%E5%A4%9A%E5%87%BA%E5%8F%A3%E6%A1%88%E4%BE%8B-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E6%A1%88%E4%BE%8B&#34; &gt;故障转移案例&lt;/a&gt;{#%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E6%A1%88%E4%BE%8B-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%A1%88%E4%BE%8B&#34; &gt;负载均衡案例&lt;/a&gt;{#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%A1%88%E4%BE%8B-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Flume%E8%81%9A%E5%90%88%E6%A1%88%E4%BE%8B&#34; &gt;Flume聚合案例&lt;/a&gt;{#Flume%E8%81%9A%E5%90%88%E6%A1%88%E4%BE%8B-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8&#34; &gt;自定义拦截器&lt;/a&gt;{#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%93%E6%88%90jar%E5%8C%85&#34; &gt;自定义拦截器打成jar包&lt;/a&gt;{#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%93%E6%88%90jar%E5%8C%85-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&#34; &gt;任务配置文件&lt;/a&gt;{#%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%87%AA%E5%AE%9A%E4%B9%89Source&#34; &gt;自定义Source&lt;/a&gt;{#%E8%87%AA%E5%AE%9A%E4%B9%89Source-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E8%87%AA%E5%AE%9A%E4%B9%89Sink&#34; &gt;自定义Sink&lt;/a&gt;{#%E8%87%AA%E5%AE%9A%E4%B9%89Sink-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81&#34; &gt;事务源码&lt;/a&gt;{#%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81-toc}&lt;/p&gt;
&lt;hr&gt;
&lt;br /&gt;
&lt;h2 id=&#34;事务puttake-e4ba8be58aa1efbc88pute38081takeefbc89&#34;&gt;&lt;a href=&#34;#%e4%ba%8b%e5%8a%a1puttake-e4ba8be58aa1efbc88pute38081takeefbc89&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;事务（Put、Take） {#%E4%BA%8B%E5%8A%A1%EF%BC%88Put%E3%80%81Take%EF%BC%89}
&lt;/h2&gt;&lt;p&gt;put事务把数据批处理写入临时缓冲区putList，，然后doCommit去检查Channel内存队列是否足够合并，如果不够，就回滚数据，如果够，就把putList的数据写入到Channel，然后由take事务从channel中拉取，写入到临时缓冲区takeList，然后把数据从takeList发送到HDFS，发送完毕后清空缓冲区，如果某个数据发送失败，就回滚到channel。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/4da3520c2f3d002b71242ed425c50075.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;架构原理-e69eb6e69e84e58e9fe79086&#34;&gt;&lt;a href=&#34;#%e6%9e%b6%e6%9e%84%e5%8e%9f%e7%90%86-e69eb6e69e84e58e9fe79086&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;架构原理 {#%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86}
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/6b33d27550dc91abe2157e6ffb6a5fbe.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在拦截阶段可以进行数据过滤清洗，洗掉脏数据。&lt;/p&gt;
&lt;h3 id=&#34;channel选择器-channele98089e68ba9e599a8&#34;&gt;&lt;a href=&#34;#channel%e9%80%89%e6%8b%a9%e5%99%a8-channele98089e68ba9e599a8&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Channel选择器 {#Channel%E9%80%89%E6%8B%A9%E5%99%A8}
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1）ChannelSelector&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为一个source可以对应对各channel&lt;/strong&gt; ，ChannelSelector 的作用就是选出 Event 将要被发往哪个 Channel。其共有两种类型， 分别是 Replicating（复制）和 Multiplexing（多路复用）。 ReplicatingSelector 会将同一个 Event &lt;strong&gt;发往所有&lt;/strong&gt;的 Channel，Multiplexing 会根据自定义的配置，将不同的Event发往不同的Channel，Multiplexing要结合拦截器使用，Multiplexing会根据数据的头信息来决定发送到哪个channel。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;SinkProcessor&#34;&gt;&lt;a href=&#34;#SinkProcessor&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;&lt;strong&gt;SinkProcessor&lt;/strong&gt;
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2）SinkProcessor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个sink只能绑定一个channel，一个channel能绑定多个sink。SinkProcessor 共 有 三 种 类 型 ， 分 别 是 DefaultSinkProcessor 、LoadBalancingSinkProcessor 和 FailoverSinkProcessor。&lt;strong&gt;DefaultSinkProcessor 对 应 的 是 单个的 Sink&lt;/strong&gt; ， LoadBalancingSinkProcessor 和 FailoverSinkProcessor 对应的是 &lt;strong&gt;Sink Group&lt;/strong&gt;，LoadBalancingSinkProcessor 可以实现负载均衡的功能，FailoverSinkProcessor 可以错误恢复的功能。&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;LoadBalancingSinkProcessor负载均衡：&lt;/p&gt;
&lt;p&gt;一个channel会发给多个sink&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/c13d7f19497ac3908e16001f79aa51a5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;FailoverSinkProcessor故障转移：&lt;/p&gt;
&lt;p&gt;当一个sink故障，任务会转移到其他sink&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/3aa5bb77e965ee81be7c4be39123ebd4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;拓扑结构-e68b93e68991e7bb93e69e84&#34;&gt;&lt;a href=&#34;#%e6%8b%93%e6%89%91%e7%bb%93%e6%9e%84-e68b93e68991e7bb93e69e84&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;拓扑结构 {#%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84}
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/b782cdaa55628b1946ecc2eb77f1b1c0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/1d75f11b9f9d8e720d54b5c6897b3bdf.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/a07850669dd6d3b62b8ffe5d1a22227a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/5d2301a75759519ab6afdc931100a780.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;单源多出口案例-e58d95e6ba90e5a49ae587bae58fa3e6a188e4be8b&#34;&gt;&lt;a href=&#34;#%e5%8d%95%e6%ba%90%e5%a4%9a%e5%87%ba%e5%8f%a3%e6%a1%88%e4%be%8b-e58d95e6ba90e5a49ae587bae58fa3e6a188e4be8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;单源多出口案例 {#%E5%8D%95%E6%BA%90%E5%A4%9A%E5%87%BA%E5%8F%A3%E6%A1%88%E4%BE%8B}
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/587f48341cf257de77cb5ad6098db637.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前置条件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;linux01上启动hive，hdfs，在linux03上部署3个flume任务，启动hdfs。linux01和linux03配置ssh免密登录。
&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;flume1在linux03监听linux01的hive日志，把hive日志的新内容发送给linux03上的flume2和flume3，flume2把内容写到hdfs，flume3把内容写到linux03的本地文件/export/server/flume/job/group1/datas文件夹中。
&lt;strong&gt;剧透：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;flume3成功把hive日志的新内容写到datas文件夹，说明linux03确实监听到了linux01 的hive日志并且成功把日志从linux01弄到了linux03，但是flume2却没有把新内容写到hdfs，猜想的可能是因为在linux03上写flume2的配置文件**sinks.k1.hdfs.path = hdfs://linux01:9820/flume/group1/%Y%m%d/%H，**linux01和linux03是不同的服务器，跨服务器没写进去，所以建议在同一台服务器搞。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在flume/job目录中新建文件夹group1来存放本次案例的任务配置文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mkdir group1&lt;/p&gt;
&lt;p&gt;cd group1&lt;/p&gt;
&lt;p&gt;vim flume-file-flume.conf&lt;/p&gt;
&lt;p&gt;vim flume-flume-hdfs.conf&lt;/p&gt;
&lt;p&gt;vim flume-flume-dir.conf&lt;/p&gt;
&lt;p&gt;三个conf配置如下：&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;flume-file-flume.conf&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Name the components on this agent
a1.sources = r1
a1.sinks = k1 k2
a1.channels = c1 c2

# 将数据流复制给所有 channel
a1.sources.r1.selector.type = replicating

# Describe/configure the source
a1.sources.r1.type = exec
a1.sources.r1.command = ssh root@linux01 &#39;tail -F /export/server/hive/logs/hive.log&#39;
#因为hive在linux01，flume在linux03，为了跨服务器监听，这里用了ssh免密登录
a1.sources.r1.shell = /bin/bash -c

# Describe the sink
# sink 端的 avro 是一个数据发送者
a1.sinks.k1.type = avro
a1.sinks.k1.hostname = linux03
a1.sinks.k1.port = 4141

a1.sinks.k2.type = avro
a1.sinks.k2.hostname = linux03
a1.sinks.k2.port = 4142
# Describe the channel
a1.channels.c1.type = memory
a1.channels.c1.capacity = 1000
a1.channels.c1.transactionCapacity = 100
a1.channels.c2.type = memory
a1.channels.c2.capacity = 1000
a1.channels.c2.transactionCapacity = 100
# Bind the source and si
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Flume入门--万字详解</title>
        <link>/zh-cn/post/2024/04/flume%E5%85%A5%E9%97%A8--%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3/</link>
        <pubDate>Mon, 22 Apr 2024 15:22:55 +0000</pubDate>
        
        <guid>/zh-cn/post/2024/04/flume%E5%85%A5%E9%97%A8--%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3/</guid>
        <description>&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;{#main-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E6%A6%82%E8%BF%B0&#34; &gt;概述&lt;/a&gt;{#%E6%A6%82%E8%BF%B0-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84&#34; &gt;基础架构&lt;/a&gt;{#%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Agent&#34; &gt;Agent&lt;/a&gt;{#Agent-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Source&#34; &gt;Source&lt;/a&gt;{#Source-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Sink&#34; &gt;Sink&lt;/a&gt;{#Sink-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Channel&#34; &gt;Channel&lt;/a&gt;{#Channel-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#selector%C2%A0&#34; &gt;selector&lt;/a&gt;{#selector%C2%A0-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#interceptor&#34; &gt;interceptor&lt;/a&gt;{#interceptor-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Event&#34; &gt;Event&lt;/a&gt;{#Event-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2&#34; &gt;安装部署&lt;/a&gt;{#%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Netcat&#34; &gt;Netcat&lt;/a&gt;{#Netcat-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#Flume%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B&#34; &gt;Flume入门案例&lt;/a&gt;{#Flume%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#1%29netcat%E6%9C%AC%E6%9C%BA%E7%AB%AF%E5%8F%A3%E7%9B%91%E6%8E%A7&#34; &gt;1)netcat本机端口监控&lt;/a&gt;{#1)netcat%E6%9C%AC%E6%9C%BA%E7%AB%AF%E5%8F%A3%E7%9B%91%E6%8E%A7-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#2%29%E7%9B%91%E6%8E%A7hive%E6%97%A5%E5%BF%97%E4%B8%8A%E4%BC%A0hdfs&#34; &gt;2)监控hive日志上传hdfs&lt;/a&gt;{#2)%E7%9B%91%E6%8E%A7hive%E6%97%A5%E5%BF%97%E4%B8%8A%E4%BC%A0hdfs-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#3%29%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%88%B0hdfs&#34; &gt;3)实时读取目录文件到hdfs&lt;/a&gt;{#3)%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%88%B0hdfs-toc}&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#4%29%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%BF%BD%E5%8A%A0%E6%96%87%E4%BB%B6&#34; &gt;4)实时监控目录下的多个追加文件&lt;/a&gt;{#4)%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%BF%BD%E5%8A%A0%E6%96%87%E4%BB%B6-toc}&lt;/p&gt;
&lt;hr&gt;
&lt;br /&gt;
&lt;h2 id=&#34;概述-e6a682e8bfb0&#34;&gt;&lt;a href=&#34;#%e6%a6%82%e8%bf%b0-e6a682e8bfb0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;概述 {#%E6%A6%82%E8%BF%B0}
&lt;/h2&gt;&lt;p&gt;Flume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量&lt;strong&gt;日志采集&lt;/strong&gt;、聚合和传 输的系统。Flume 基于流式架构，灵活简单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/2e3869480961b81ca25702e6d1970111.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;基础架构-e59fbae7a180e69eb6e69e84&#34;&gt;&lt;a href=&#34;#%e5%9f%ba%e7%a1%80%e6%9e%b6%e6%9e%84-e59fbae7a180e69eb6e69e84&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;基础架构 {#%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84}
&lt;/h2&gt;&lt;p&gt;Flume运行的核心是 Agent。Flume是以agent为最小的独立运行单位。一个agent就是一个JVM。它是 一个完整的数据收集工具，含有三个核心组件，分别是source、 channel、 sink。通过这些组件， Event 可以从一个地方流向另一个地方。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/0ec63ccc446e6faf2bcafcbc179a7e34.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;Agent&#34;&gt;&lt;a href=&#34;#Agent&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Agent
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Agent 是一个 JVM 进程，它以事件的形式将数据从源头送至目的。&lt;/li&gt;
&lt;li&gt;Agent 主要有 3 个部分组成，Source、Channel、Sink。同一台服务器可以运行多个Agent，每个Agent可以有多个source、sink、channel。Agent的名字可以相同但是不能同时启动任务，否则会出现冲突。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;Source&#34;&gt;&lt;a href=&#34;#Source&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Source
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Source 是负责接收数据到 Flume Agent 并传给Channel的组件。&lt;/li&gt;
&lt;li&gt;Source 组件可以处理各种类型、各种格式的日志数据，包括 avro、thrift、exec、jms、spooling directory、netcat、taildir、 sequence generator、syslog、http、legacy这些不同的数据源。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;Sink&#34;&gt;&lt;a href=&#34;#Sink&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Sink
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Sink 不断地轮询 Channel 中的事件且批量地移除它们，并将这些事件批量写入到存储系统或索引系统、或者被发送到另一个 Flume Agent。&lt;/li&gt;
&lt;li&gt;Sink 组件目的地包括 hdfs、logger、avro、thrift、ipc、file、HBase、solr、自定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Channel&#34;&gt;&lt;a href=&#34;#Channel&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Channel
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Channel 是位于 Source 和 Sink 之间的缓冲区。因此，Channel 允许 Source 和 Sink 运作在不同的速率上。&lt;/li&gt;
&lt;li&gt;Channel 是线程安全的，可以同时处理几个 Source 的写入操作和几个 Sink 的读取操作。&lt;/li&gt;
&lt;li&gt;Flume 自带两种 Channel：Memory Channel 和 File Channel。&lt;/li&gt;
&lt;li&gt;Memory Channel 是内存中的队列。Memory Channel 在不需要关心数据丢失的情景下适 用。如果需要关心数据丢失，那么 Memory Channel 就不应该使用，因为程序死亡、机器宕 机或者重启都会导致数据丢失。&lt;/li&gt;
&lt;li&gt;File Channel 将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数 据。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;selector-selectorc2a0&#34;&gt;&lt;a href=&#34;#selector-selectorc2a0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;selector {#selector%C2%A0}
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;选择器，作用于source端，然后决定数据发往哪个目标。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;interceptor&#34;&gt;&lt;a href=&#34;#interceptor&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;interceptor
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;拦截器，flume允许使用拦截器拦截数据。允许使用拦截器链，作用于source和sink阶段。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;Event&#34;&gt;&lt;a href=&#34;#Event&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Event
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;传输单元，Flume 数据传输的基本单元，以 Event 的形式将数据从源头送至目的地。&lt;/li&gt;
&lt;li&gt;Event 由 Header 和 Body 两部分组成，Header 用来存放该 event 的一些属性，为 K-V 结构， Body 用来存放该条数据，形式为字节数组。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/f38006431e7a0b773e856f928571ee27.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装部署-e5ae89e8a385e983a8e7bdb2&#34;&gt;&lt;a href=&#34;#%e5%ae%89%e8%a3%85%e9%83%a8%e7%bd%b2-e5ae89e8a385e983a8e7bdb2&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;安装部署 {#%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2}
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;p&gt;tar -zxvf /export/server/apache-flume-1.9.0-bin.tar.gz /export/server/&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;为了让flume1.9兼容hadoop3.x，要删除flume lib包下的guava-11.0.2.jar&lt;/p&gt;
&lt;p&gt;rm guava-11.0.2.jar&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;Netcat&#34;&gt;&lt;a href=&#34;#Netcat&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Netcat
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo yum install -y nc&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;简单案例&lt;/strong&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&#34;flume入门案例-flumee585a5e997a8e6a188e4be8b&#34;&gt;&lt;a href=&#34;#flume%e5%85%a5%e9%97%a8%e6%a1%88%e4%be%8b-flumee585a5e997a8e6a188e4be8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Flume入门案例 {#Flume%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B}
&lt;/h2&gt;&lt;h3 id=&#34;1netcat本机端口监控-1netcate69cace69cbae7abafe58fa3e79b91e68ea7&#34;&gt;&lt;a href=&#34;#1netcat%e6%9c%ac%e6%9c%ba%e7%ab%af%e5%8f%a3%e7%9b%91%e6%8e%a7-1netcate69cace69cbae7abafe58fa3e79b91e68ea7&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;1)netcat本机端口监控 {#1)netcat%E6%9C%AC%E6%9C%BA%E7%AB%AF%E5%8F%A3%E7%9B%91%E6%8E%A7}
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在flume文件夹下创建工作目录job&lt;/p&gt;
&lt;p&gt;mkdir job&lt;/p&gt;
&lt;p&gt;在job目录下建立任务配置文件，文件名任取，建议见名知意，net表示数据源是端口，logger表示数据是日志文件&lt;/p&gt;
&lt;p&gt;vim net-flume-logger.conf&lt;/p&gt;
&lt;p&gt;配置文件内容如下：&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;# Name the components on this agent
a1.sources = r1 #a1是该agent名，不可重复
a1.sinks = k1
a1.channels = c1

# Describe/configure the source
a1.sources.r1.type = netcat
a1.sources.r1.bind = localhost
a1.sources.r1.port = 4444

# Describe the sink
a1.sinks.k1.type = logger

# Use a channel which buffers events in memory
a1.channels.c1.type = memory
a1.channels.c1.capacity = 1000 #最多接收1000个event
a1.channels.c1.transactionCapacity = 100 #100个事务，一次最多发送100个event，事务失败会回滚。capacity应该＜transactionCapacity

# Bind the source and sink to
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
