<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Docker on 青秋博客</title>
        <link>/zh-cn/categories/docker/</link>
        <description>Recent content in Docker on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Sun, 26 Jan 2025 12:00:00 +0000</lastBuildDate><atom:link href="/zh-cn/categories/docker/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【排坑】云服务器docker部署前后端分离项目&#43;域名解析&#43;OSS</title>
        <link>/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/</link>
        <pubDate>Sun, 26 Jan 2025 12:00:00 +0000</pubDate>
        
        <guid>/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;踩坑推荐&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145285512&#34;  title=&#34;【大坑！已解决】docker容器jar包连不上另一个容器的mysql-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【大坑！已解决】docker 容器 jar 包连不上另一个容器的 mysql-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145290367&#34;  title=&#34;【排坑】程序包jdk.nashorn.internal.ir.debug不存在-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【排坑】程序包 jdk.nashorn.internal.ir.debug 不存在-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145308002&#34;  title=&#34;【已解决】 [ org.apache.catalina.core.StandardService : 173 ] - Stopping service [Tomcat]-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】 [ org.apache.catalina.core.StandardService : 173 ] - Stopping service [Tomcat]-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145339474&#34;  title=&#34;【已解决】redisCache注解失效，没写cacheConfig-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】redisCache 注解失效，没写 cacheConfig-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145346364?sharetype=blogdetail&amp;amp;sharerId=145346364&amp;amp;sharerefer=PC&amp;amp;sharesource=qq_73181349&amp;amp;spm=1011.2480.3001.8118&#34;  title=&#34;【已解决】OSS配置问题-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】OSS 配置问题-CSDN 博客&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;环境工具&#34;&gt;&lt;a href=&#34;#%e7%8e%af%e5%a2%83%e5%b7%a5%e5%85%b7&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;环境工具
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;阿里云服务器 Alibaba Cloud Linux 3.2104 LTS 64 位&lt;/li&gt;
&lt;li&gt;OSS&lt;/li&gt;
&lt;li&gt;域名解析（具体就不写了，怕被 DDOS🤡）&lt;/li&gt;
&lt;li&gt;后端 jar 包 jdk11、springboot 2.6.13&lt;/li&gt;
&lt;li&gt;前端 umimax+antd 系列&lt;/li&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;nginx latest&lt;/li&gt;
&lt;li&gt;redis7.2.4&lt;/li&gt;
&lt;li&gt;etcd3.5.15&lt;/li&gt;
&lt;li&gt;mysql8.0.35&lt;/li&gt;
&lt;li&gt;SSH 客户端 final shell&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql、redis、nginx 等所有项目依赖环境全部部署在 docker 容器中。
mysql、redis 这些，部署完记得在本地连一下看有没有问题，有问题就用 docker logs 看日志或者进容器改配置，服务器记得放开对应端口 ！！&lt;/p&gt;
&lt;p&gt;每部署完一个容器就用 docker ps 看一下 status 和 port，如果是 status 是 restarting 或者 port 没映射上，大概率有问题，另外&lt;strong&gt;注意 cpu 和内存占用&lt;/strong&gt; （final shell 看的很方便），有几次启动容器后 cpu 和内存占用爆满了，服务器都登不上了 🤣&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image.png&#34;
	width=&#34;449&#34;
	height=&#34;1173&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image_hu_7df59b6c85579899.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image_hu_c250829e8015be6a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;38&#34;
		data-flex-basis=&#34;91px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;拉取镜像慢的话可以改 docker 镜像配置，具体看&lt;a class=&#34;link&#34; href=&#34;https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors&#34;  title=&#34;阿里云登录 - 欢迎登录阿里云，安全稳定的云计算服务平台&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;常用-docker-命令&#34;&gt;&lt;a href=&#34;#%e5%b8%b8%e7%94%a8-docker-%e5%91%bd%e4%bb%a4&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;常用 docker 命令
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;docker pull 镜像名    【拉取镜像】&lt;/li&gt;
&lt;li&gt;docker search  镜像名   【搜索镜像】&lt;/li&gt;
&lt;li&gt;docker images 【列出 docker 的所有镜像】&lt;/li&gt;
&lt;li&gt;docker ps（-a） 【列出当前在运行的容器，加上-a 参数列出所有容器，包括停止的】&lt;/li&gt;
&lt;li&gt;docker stop/start 容器 id 【暂停/开始容器运行】&lt;/li&gt;
&lt;li&gt;docker rmi 镜像 id 【删除镜像】&lt;/li&gt;
&lt;li&gt;docker rm（-f）【删除 stop 容器，加上-f 参数可以强制删除 start 容器】&lt;/li&gt;
&lt;li&gt;docker logs 容器 id 【展示出该容器的运行日志】&lt;/li&gt;
&lt;li&gt;docker run 【启动镜像，运行一个容器】&lt;/li&gt;
&lt;li&gt;docker build  【构建镜像】&lt;/li&gt;
&lt;li&gt;docker info 【查看 docker 版本号等信息】&lt;/li&gt;
&lt;li&gt;systemctl status docker 【docker 运行信息】&lt;/li&gt;
&lt;li&gt;docker network 【构建 docker 网络】&lt;/li&gt;
&lt;li&gt;docker exec -it 容器 id  /bin/bash【进入容器内部】&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署-mysql&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2-mysql&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署 mysql
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker pull 拉取 mysql 镜像就不说了，直接运行镜像命令如下&lt;/p&gt;
&lt;p&gt;docker run &amp;ndash;restart=always  &amp;ndash;name blog_mysql --network blog_network  -d  -p 3306:3306  -e TZ=Asia/Shanghai -e MYSQL_ROOT_PASSWORD=xxxx mysql:8.0.35&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解读&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;--restart=always 是每次 docker 服务重启时该容器也自动启动，建议加上，不然每次重启服务器或 docker 时都要手动再启动容器。&lt;/li&gt;
&lt;li&gt;--name 是给该容器命名，&amp;ndash;network 是指定该容器的所属 docker 网络，便于各个容器之间端口通信，&lt;/li&gt;
&lt;li&gt;-d 是后台运行，&lt;/li&gt;
&lt;li&gt;-p 是端口映射，我没每次启动一个容器都相当于开启一个新的小操作系统，需要把这个小操作系统的端口和服务器端口做个映射，这样容器才能和外界交流&lt;/li&gt;
&lt;li&gt;-e 设置环境变量，这里有个坑，如果不指定时区，部署 mysql 后 select now()就会发现&lt;strong&gt;mysql 时间和实际时间差 8h&lt;/strong&gt;，启动时设置下 Asia/Shanghai 即可解决。MYSQL_ROOT_PASSWORD 就是指定 mysql 的连接密码，远程连接要用。&lt;/li&gt;
&lt;li&gt;mysql:8.0.35 就是指明要运行的镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果启动后 mysql 远程连接不了，用 docker logs 查看该容器的日志，一般会有提示&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署-etcd&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2-etcd&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署 etcd
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker run &amp;ndash;restart=always -d &amp;ndash;name blog_etcd --network blog_network  -p 2379:2379  &amp;ndash;env ALLOW_NONE_AUTHENTICATION=yes   &amp;ndash;env   ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379   bitnami/etcd:3.5.15&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解读：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;etcd 以单节点方式启动，设置无需密码，看个人项目是否需要 etcd，不需要就不用部署 etcd&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署-redis&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2-redis&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署 redis
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker run &amp;ndash;restart=always &amp;ndash;name blog_redis --network blog_network -p 6379:6379 -v /data/blog_redis/data:/data   -v  /data/blog_redis/conf/redis.conf:/etc/redis/redis.conf  -d redis:7.2.4 redis-server /etc/redis/redis.conf&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解读&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v 是挂载目录，简单来说就是把服务器的本机目录文件和容器内的某个目录文件做个映射，我把服务器的/data/blog_redis/data 目录映射到了容器内的/data 目录，这个目录用来存 redis 的数据文件，所以需要改 redis.conf 文件中存放数据的配置，我的数据文件存到了/data 下：
&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-3.png&#34;
	width=&#34;1160&#34;
	height=&#34;746&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-3_hu_f5e1906245ac58c9.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-3_hu_e8c6a324efe2eeba.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;373px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;/data/blog_redis/conf/redis.conf:/etc/redis/redis.conf 就是映射配置文件，redis 启动是需要 conf 文件的，我希望 redis 以我规定的 conf 文件启动，所以要也要挂载一下&lt;/li&gt;
&lt;li&gt;有需要的还可以挂载一下日志文件，记得修改 redis.conf&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署后端&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2%e5%90%8e%e7%ab%af&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署后端
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;本地 idea 打 jar 包，然后用 final shell 上传到云服务器，为什么不用阿里的 Workbench 远程连接，因为这个传文件太慢了。&lt;strong&gt;坑！打包时记得看控制台的输出日志有没有黄色警告，具体原因看：&lt;/strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145308002&#34;  title=&#34;【已解决】 [ org.apache.catalina.core.StandardService : 173 ] - Stopping service [Tomcat]-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】 [ org.apache.catalina.core.StandardService : 173 ] - Stopping service [Tomcat]-CSDN 博客&lt;/a&gt;&lt;strong&gt;另外打包时记得改 yml 文件的 mysql 和 redis 的 url，ip 地址不要写 127.0.0.1 或 lcoalhost，要写服务器的公网 ip，不然 jar 包连不上 mysql 和 redis，注意 mysql 数据库大小写具体看这个：&lt;/strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145285512&#34;  title=&#34;【大坑！已解决】docker容器jar包连不上另一个容器的mysql-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【大坑！已解决】docker 容器 jar 包连不上另一个容器的 mysql-CSDN 博客&lt;/a&gt;&lt;br&gt;
yml 文件写的数据库是 Blog，实际数据库是 blog
&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-4.png&#34;
	width=&#34;1684&#34;
	height=&#34;210&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-4_hu_480b67f65753eeb4.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-4_hu_eed6dceb2523c018.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;801&#34;
		data-flex-basis=&#34;1924px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;在 jar 包的同一目录下，创建一个 blog_dockerfile 文件，内容如下：&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM openjdk:11-jre-slim
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN apt-get update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y bash &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/apt/lists/*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;COPY blog-0.0.1-SNAPSHOT.jar /app/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WORKDIR /app
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EXPOSE &lt;span class=&#34;m&#34;&gt;8081&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CMD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;“bash”, “-c”, “java -jar -Duser.timezone&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;GMT+08 blog-0.0.1-SNAPSHOT.jar “&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;解读&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FROM openjdk:11-jre-slim  是下载 jar 包运行需要的 jdk，我只需要 jar 运行环境，所以下了 jre，slim 是基于 Debian/Ubuntu，而 alpine 是基于 centos 的，操作系统倒无所谓，我用两个都部署了 jar 包都能成功。这里我发现 jdk11 要比 jdk8 的镜像包大很多，而且&lt;strong&gt;用 jdk11 docker build 的时候特别慢，甚至会构建失败，用 jdk8 就特别快&lt;/strong&gt; 2. COPY 把当前目录（dockerfile 所在目录）的 jar 包拷贝到容器的/app/目录下 3. WORKDIR 设置工作目录为/app/ 4. EXPOSE 暴露 8081 端口，因为我的 jar 包运行在 8081 端口。他需要和外界通信，所以得暴露出来 5. CMD 就是用 docker run 启动容器后他要执行的命令了，这里有个坑
&lt;strong&gt;-Duser.timezone=GMT+08，启动时指定了时区&lt;/strong&gt;，不指定的话会发现 jar 包的运行日志时间和实际时间差 8h&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker build -f blog_dockerfile -t blog-backend .&lt;br&gt;
写好 dockerfile 后构建镜像，-f 是指定 dockerfile 文件，-t 是构建镜像后的镜像名，.就是当前目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker run &amp;ndash;name blog-backend -d &amp;ndash;restart=always  -v /data/blog_backend/logs:/tmp/logs  --network blog_network  -p 8081:8081  blog-backend:latest&lt;br&gt;
构建完镜像后启动，这里我挂载了日志文件，方便查看日志，如果不挂载的话每次看日志都得进到容器里面，不方便，而且只有容器运行的时候才能进容器内部，如果容器停了就进不去，-p 映射端口，我后端部署在 8081，这里和服务器的 8081 端口做了个映射。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-部署前端&#34;&gt;&lt;a href=&#34;#docker-%e9%83%a8%e7%bd%b2%e5%89%8d%e7%ab%af&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Docker 部署前端
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本地 vscode 构建，生成的 dist 目录用 final shell 上传到云服务器，同样在 dist 同一目录下建一个 blog_fronted_dockerfile 文件，内容如下：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RUN rm /etc/nginx/conf.d/default.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ADD default.conf /etc/nginx/conf.d/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EXPOSE &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EXPOSE &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;COPY dist/  /usr/share/nginx/html/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CMD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;“nginx”, “-g”, “daemon off&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;”&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;然后还需要一个 default.conf 来替换 nginx 的默认配置文件，内容如下：
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;listen       80&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#nginx 默认监听 80 端口，可以改成其他的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    server_name  公网 ip&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;#server_name  域名;如果有域名，解析后可以用域名，不用 ip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;location / &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        root   /usr/share/nginx/html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        index  index.html index.htm&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        try_files &lt;span class=&#34;nv&#34;&gt;$uri&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$uri&lt;/span&gt;/ /index.html &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;404&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 后端接口转发&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;location /api/ &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_pass http://公网 ip:8081&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 转发到后端服务 8081 端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_set_header Host &lt;span class=&#34;nv&#34;&gt;$host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_set_header X-Real-IP &lt;span class=&#34;nv&#34;&gt;$remote_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_set_header X-Forwarded-For &lt;span class=&#34;nv&#34;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        proxy_set_header X-Forwarded-Proto &lt;span class=&#34;nv&#34;&gt;$scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    error_page   &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;502&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;503&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;504&lt;/span&gt;  /50x.html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; /50x.html &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        root   html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;docker build -f blog_fronted_dockerfile -t blog-fronted .&lt;br&gt;
构建镜像&lt;/li&gt;
&lt;li&gt;docker run &amp;ndash;restart=always -d -p 443:443 -p 80:80  &amp;ndash;name blog_fronted blog-fronted:latest&lt;br&gt;
运行镜像，映射 443 和 80 端口&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;oss-配置&#34;&gt;&lt;a href=&#34;#oss-%e9%85%8d%e7%bd%ae&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;OSS 配置
&lt;/h2&gt;&lt;p&gt;看我这篇文章&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_73181349/article/details/145346364?sharetype=blogdetail&amp;amp;sharerId=145346364&amp;amp;sharerefer=PC&amp;amp;sharesource=qq_73181349&amp;amp;spm=1011.2480.3001.8118&#34;  title=&#34;【已解决】OSS配置问题-CSDN博客&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【已解决】OSS 配置问题-CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;防盗链设置&#34;&gt;&lt;a href=&#34;#%e9%98%b2%e7%9b%97%e9%93%be%e8%ae%be%e7%bd%ae&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;防盗链设置
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我们存储在 oss 的图片通过图片 url 来访问，如果有其他用户拿到了我们的图片 url 进行访问就会刷我们的流量甚至欠费，所以最好设置防盗链，白名单加上前端部署的域名即可&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-1.png&#34;
	width=&#34;2378&#34;
	height=&#34;1271&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-1_hu_8f7daece9232d1f2.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-1_hu_c3d2cb77e1d94263.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;449px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加上防盗链之后我们测试一下，拿着图片 url 在本地浏览器访问，结果如下，因为白名单仅对服务器开放了权限，没有对本地开放，所以本地访问就无权限了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-2.png&#34;
	width=&#34;1905&#34;
	height=&#34;433&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-2_hu_a2ed331837a13a2a.png 480w, /zh-cn/post/2025/01/%E6%8E%92%E5%9D%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8docker%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-oss/image-2_hu_7771ae1c55897d8f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;439&#34;
		data-flex-basis=&#34;1055px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【大坑！已解决】docker容器jar包连不上另一个容器的mysql</title>
        <link>/zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/</link>
        <pubDate>Tue, 21 Jan 2025 16:35:43 +0000</pubDate>
        
        <guid>/zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/</guid>
        <description>&lt;h2 id=&#34;最终解决方案&#34;&gt;&lt;a href=&#34;#%e6%9c%80%e7%bb%88%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;最终解决方案
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;mysq 版本 l8.0.35，驱动是 8.0.26，com.mysql.cj.jdbc.Driver&lt;/p&gt;
&lt;p&gt;jdbc 的 url：&lt;/p&gt;
&lt;p&gt;jdbc:mysql://&lt;strong&gt;云服务器的主机地址（127.0.0.1 和 localhost 都不行）&lt;/strong&gt;:3306/hotkey_db?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=true&amp;amp;autoReconnect=true&amp;amp;failOverReadOnly=false&amp;amp;serverTimezone=GMT&amp;amp;useTimezone=true&lt;/p&gt;
&lt;p&gt;（有些参数应该是没用的，但是懒得改了，能跑就行）&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;问题场景&#34;&gt;&lt;a href=&#34;#%e9%97%ae%e9%a2%98%e5%9c%ba%e6%99%af&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;问题场景
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这两天在云服务器的 docker 上部署了 jar 包，jar 包要连另一个容器的 mysql，在本地测试过本地运行的 jar 包可以连接云服务器的 mysql，但是云服务器的 docker 的 jar 包连不上。具体展示如下：jar 包成功运行后登录时就会报这样的错误，执行 sql 查询失败，说是连不上 mysql ，以下是 jar 包的部分日志。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;报错日志&#34;&gt;&lt;a href=&#34;#%e6%8a%a5%e9%94%99%e6%97%a5%e5%bf%97&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;报错日志
&lt;/h2&gt;&lt;p&gt;登录时执行 mysql 查询失败，因为连不上 mysql，用 docker network 查看了网络信息，这些个容器启动时候已经在&lt;strong&gt;同一个 docker 网络&lt;/strong&gt;了，并且在 jar 包的容器中可以 ping 通 mysql 的网关
&lt;img src=&#34;/zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/image.png&#34;
	width=&#34;2718&#34;
	height=&#34;311&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/image_hu_adf52b79e88e85be.png 480w, /zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/image_hu_e53b2a8081fe9de7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;873&#34;
		data-flex-basis=&#34;2097px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;mysql 连接报错
&lt;img src=&#34;/zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/image-1.png&#34;
	width=&#34;2747&#34;
	height=&#34;100&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/image-1_hu_e9d39a0aaded1d66.png 480w, /zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/image-1_hu_d5478756689e3706.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;2747&#34;
		data-flex-basis=&#34;6592px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/image-2.png&#34;
	width=&#34;2183&#34;
	height=&#34;120&#34;
	srcset=&#34;/zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/image-2_hu_334576db431398e5.png 480w, /zh-cn/post/2025/01/%E5%A4%A7%E5%9D%91%E5%B7%B2%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8jar%E5%8C%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84mysql/image-2_hu_724ded184e98d790.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1819&#34;
		data-flex-basis=&#34;4366px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;communications link failure，很经典的错误，去网上查了很多解决办法，包括但不限于修改 jar 包的 jdbc 的 url 连接参数，比如 useSSL=false、时区 serverTimeZone、localhost 和 127.0.0.1，甚至是 mysql 的配置文件 my.cnf，说是因为连接池连接过期的，要修改 wait_timeout。结果没一个能解决问题的，后来问了一个朋友，他正好遇见过同样的问题，之前还给我说过但是我没记住 🤣，他的解决方案就是&lt;strong&gt;把 jdbc 的 url 换成云服务器的主机地址，而非 127.0.0.4 或 localhost。至此问题解决。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;分析&#34;&gt;&lt;a href=&#34;#%e5%88%86%e6%9e%90&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;分析
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker 的每个容器之间是进程隔离的，每个容器都相当于一个独立的主机，我的 jar 和 mysql 不在同一个容器，相当于 mysql 和 jar 包不在一个主机上，那么 jar 包里的 127.0.0.1:3306 显然是连不到 mysql 的。&lt;/p&gt;
&lt;p&gt;最后又试了试，&lt;strong&gt;如果 jar 包和 mysql 不在同一个 docker 网络，也是可以正常运行的，因为 jar 已经通过主机地址访问到 mysql 了&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>云原生--微服务、CI/CD、SaaS、PaaS、IaaS</title>
        <link>/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/</link>
        <pubDate>Fri, 11 Oct 2024 12:00:00 +0000</pubDate>
        
        <guid>/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;介绍云原生之前，我们先介绍一下 CNCF，全称为 Cloud Native Computing Foundation，中文译为&amp;quot;&lt;strong&gt;云原生计算基金会&lt;/strong&gt;&amp;quot;。CNCF 致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。所以说，CNCF 是云原生领域影响力最大最有话语权的组织。以下是 CNCF 对云原生的定义：&lt;/p&gt;
&lt;p&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。&lt;strong&gt;云原生的代表技术包括容器、&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/product/tcm?from_column=20065&amp;amp;from=20065&#34;  title=&#34;服务网格&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;服务网格&lt;/a&gt;&lt;strong&gt;、微服务、不可变基础设施和声明式&lt;/strong&gt; &lt;strong&gt;API&lt;/strong&gt; &lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;云原生概念和特点&#34;&gt;&lt;a href=&#34;#%e4%ba%91%e5%8e%9f%e7%94%9f%e6%a6%82%e5%bf%b5%e5%92%8c%e7%89%b9%e7%82%b9&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;云原生概念和特点
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;概念&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;云原生是一种**构建和运行应用程序的方法，程序生于云端，长于云端。**从有构建应用的想法开始，到需求、设计、开发、测试、构建、打包、部署所有的软件生命周期全部都在云平台上面进行，从应用设计之初（技术选型、架构设计、编译机制）就充分考虑并符合了云的特征，在云平台以最佳姿态原型、为企业降本增效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;弹性扩缩容：本地部署的传统应用无法动态扩展，往往需要冗余资源以抵抗流量高峰，而云原生应用利用云的弹性自动伸缩，应用程序快速复制扩展、部署。&lt;/li&gt;
&lt;li&gt;快速启停：应用程序可以快速启停以应对流量变化&lt;/li&gt;
&lt;li&gt;隔离性强：进程级别的故障隔离&lt;/li&gt;
&lt;li&gt;CICD：持续集成、持续交付、持续部署&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;常见云模式&#34;&gt;&lt;a href=&#34;#%e5%b8%b8%e8%a7%81%e4%ba%91%e6%a8%a1%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;常见云模式
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;公有云&lt;/strong&gt;&lt;br&gt;
阿里云、华为云、腾讯云、百度云等等，只需购买就能使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私有云&lt;/strong&gt;&lt;br&gt;
自己搭建或购买的私有平台，使用对象通常是政府、金融机构和企业&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合云：&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://www.ibm.com/cn-zh/think/insights/hybrid-cloud-advantages-disadvantages&#34;  title=&#34;混合云的优缺点 | IBM&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;混合云的优缺点 | IBM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行业云&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;云对外提供服务的架构模式&#34;&gt;&lt;a href=&#34;#%e4%ba%91%e5%af%b9%e5%a4%96%e6%8f%90%e4%be%9b%e6%9c%8d%e5%8a%a1%e7%9a%84%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;云对外提供服务的架构模式
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image.png&#34;
	width=&#34;609&#34;
	height=&#34;426&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image_hu_986c3e62ec5817a9.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image_hu_e6b4f0e15c46160d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;343px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;iaasinfrastructure-as-a-service&#34;&gt;&lt;a href=&#34;#iaasinfrastructure-as-a-service&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;IaaS(Infrastructure-as-a-Service)
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基础设施即服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向外提供硬件资源等基础设施，包括计算、存储、网络等等，用户可以基于基础设施进行上层应用开发部署。&lt;/p&gt;
&lt;p&gt;拿租房比喻就是提供毛坯房，自己装水电、置办家具。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;paasplatform-as-a-service&#34;&gt;&lt;a href=&#34;#paasplatform-as-a-service&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;PaaS(Platform-as-a-Service)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;平台即服务&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;向外提供平台组件服务，如操作系统、数据库。&lt;/p&gt;
&lt;p&gt;拿租房比喻就是提供装好水电的房子，自己只需置办家具即可入住。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;saassoftware-as-a-service&#34;&gt;&lt;a href=&#34;#saassoftware-as-a-service&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;SaaS(SoftWare-as-a-Service)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;软件即服务&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直接向外提供一款成品应用型服务，屏蔽了用户对软件底层的基础设施，用户只需要拿来使用即可。如钉钉、企业微信。&lt;/p&gt;
&lt;p&gt;拿租房比喻就是提供装好水电、家具的房子，直接交租金就拎包入住。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;faasfunction-as-a-service&#34;&gt;&lt;a href=&#34;#faasfunction-as-a-service&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;FaaS(Function-as-a-Service)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;功能即服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ibm.com/cn-zh/topics/faas&#34;  title=&#34;https://www.ibm.com/cn-zh/topics/faas&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ibm.com/cn-zh/topics/faas&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FaaS 是一种云计算服务，专注于事件驱动，在有请求时自动启动服务，没有时自动关闭服务。
Serverless 和 FaaS 经常被混为一谈，我认为  &lt;strong&gt;FaaS 算是无服务器的子集&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;无服务器专注于所有服务类别，无论是计算、存储、数据库、消息传递还是 API 网关等。其中服务器的配置、管理和计费对最终用户不可见，用户只需要对服务按需付费即可。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;云原生核心技术栈&#34;&gt;&lt;a href=&#34;#%e4%ba%91%e5%8e%9f%e7%94%9f%e6%a0%b8%e5%bf%83%e6%8a%80%e6%9c%af%e6%a0%88&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;云原生核心技术栈
&lt;/h2&gt;&lt;h3 id=&#34;微服务&#34;&gt;&lt;a href=&#34;#%e5%be%ae%e6%9c%8d%e5%8a%a1&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;微服务
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单体架构&lt;/strong&gt;：把业务所有功能集中在一个项目中开发，以整个系统为单位进行部署，这种架构简单，如果某一业务的请求量非常大，那么是无法单独扩展该业务的，只能拷贝整个单体应用，再部署一套环境，来实现集群。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微服务架构&lt;/strong&gt;：根据业务把整个项目划分成多个功能模块，比如订单模块、购物车模块、支付模块、商品详情模块等等，模块之间通过 http 或者 RPC 进行通信。这种架构降低了服务耦合，有利于服务扩展，同时每个服务模块实现了故障隔离，提高了可用性！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpringCloud 就是微服务中具有代表性的一个技术栈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-1.png&#34;
	width=&#34;946&#34;
	height=&#34;549&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-1_hu_f7c7b50f88d8ca66.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-1_hu_524bcc656b205137.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;413px&#34;
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;容器技术-dockerk8s&#34;&gt;&lt;a href=&#34;#%e5%ae%b9%e5%99%a8%e6%8a%80%e6%9c%af-dockerk8s&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;容器技术-Docker、K8S
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;所谓容器，对操作系统（通常为 Linux）进行虚拟化，具有比虚拟机更高的可移植性和资源效率，可以解决环境差异带来的部署等问题。&lt;/p&gt;
&lt;p&gt;我们把单体项目拆成了微服务，各个微服务模块所需的部署环境可能大不相同，那么不妨把每个微服务模块放到容器中，这个容器包含了服务模块运行所需的除操作系统内容以外所需的函数、配置、依赖等，类似 exe 安装包，这就不仅解决了环境差异带来的应用部署问题，而且各个容器之间实现&lt;strong&gt;进程隔离&lt;/strong&gt;，容器启动速度也更快。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以 Docker 容器为资源分割和调度的基本单位，封装整个软件运行时的环境，然后发布到 Linux 机器上。&lt;/p&gt;
&lt;p&gt;按照 Docker 的设计方案，应用软件的交付过程如同海上运输，操作系统如同一个货轮，操作系统上的软件都如同一个集装箱。用户可以通过标准化手段自由组装运行环境，同时集装箱的内容可以由用户自定义，然后使用 k8s 编排管理容器的生命周期。如此一来，交付一个应用软件产品，就相当于交付一系列标准化组件的集合。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;devopscicd&#34;&gt;&lt;a href=&#34;#devopscicd&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;DevOps&amp;amp;CI/CD
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Development 和 Operations，即开发运维一体化，涉及软件在整个开发生命周期中的持续开发，持续测试，持续集成，持续部署和持续监控。简单来说是开发和运维之间地高度协同，实现全生命周期的工具全链路打通与自动化、跨团队的线上&lt;strong&gt;协作能力&lt;/strong&gt;。完成高频率部署的同时，提高生产环境的可靠性、稳定性、弹性和安全性。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-2.png&#34;
	width=&#34;1135&#34;
	height=&#34;687&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-2_hu_a1086855647d301d.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-2_hu_8acff9975cd5bcbc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;396px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CI：持续集成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持续集成：开发团队通过将代码的不同部分通过&lt;strong&gt;版本控制系统&lt;/strong&gt;集成到共享存储库中，系统可以自动频繁地进行构建和测试，以确保代码的一致性和稳定性。，一定程度上避免代码冲突和重复劳动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CD：持续交付、持续部署&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立在持续集成的基础上，持续交付后的代码处于待发布状态，系统随时可以自动快速地部署到生产环境中，确保应用始终是最新的，支持&lt;strong&gt;频繁变更和金丝雀发布&lt;/strong&gt;。代表产品有阿里云的 Serverless 应用引擎 SAE。&lt;a class=&#34;link&#34; href=&#34;https://www.aliyun.com/product/aliware/sae?spm=5176.21213303.J_qCOwPWspKEuWcmp8qiZNQ.1.2ac62f3dtZNEdX&amp;amp;scm=20140722.S_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@953616._.ID_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@953616-RL_sae-LOC_llm-OR_ser-PAR1_213e37c817285702237838876e1c63-V_3-RE_new2@@cardNew&#34;  title=&#34;Serverless 应用引擎SAE_应用托管服务_零代码改造上云_容器与中间件-阿里云&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Serverless 应用引擎 SAE_应用托管服务_零代码改造上云_容器与中间件-阿里云&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;serverless&#34;&gt;&lt;a href=&#34;#serverless&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Serverless
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.redhat.com/zh/topics/cloud-native-apps/what-is-serverless&#34;  title=&#34;Serverless 是什么？无服务器架构简介-红帽&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Serverless 是什么？无服务器架构简介-红帽&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/857454&#34;  title=&#34;一文读懂 Serverless 的起源、发展和落地实践-阿里云开发者社区&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一文读懂 Serverless 的起源、发展和落地实践-阿里云开发者社区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-3.png&#34;
	width=&#34;823&#34;
	height=&#34;484&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-3_hu_222d0db168477d30.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-3_hu_eda9006e95d083db.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Serverless 并不是不需要服务器，而是将服务器全权托管给了云厂商，用户聚焦业务代码，无需关心管理服务器，只用把业务部署到平台的容器上，服务器能自动进行弹性伸缩，这些容器在&lt;strong&gt;被调用时会自动按需启动&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;不可变基础设施&#34;&gt;&lt;a href=&#34;#%e4%b8%8d%e5%8f%af%e5%8f%98%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;不可变基础设施
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在传统的可变服务器基础架构中，开发人员操作服务器，手动升级或降级软件包，逐个服务器地调整配置文件，服务器会不断更新和修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可变基础设施通常会导致以下问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持续的修改服务器，缺乏标准，易引入不稳定因素，会导致灾难发生后很难重新构建起等效的新服务。&lt;/p&gt;
&lt;p&gt;而不可变基础设施，最基本的指运行服务的服务器在完成部署后，就不在进行更改，如果配置发生了改变就会生成新的容器，旧容器直接销毁。这就保证了基础架构中更高的一致性和可靠性，以及更简单，更可预测的部署过程。这样云原生就有了稳定的基石！&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;声明式-apik8s&#34;&gt;&lt;a href=&#34;#%e5%a3%b0%e6%98%8e%e5%bc%8f-apik8s&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;声明式 API(k8s)
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;在命令式 API 中，我们可以直接发出服务器要执行的命令，例如：&lt;/em&gt; *“运行容器”、“停止容器”等。*通俗的说，命令式编程是第一人称，我要做什么，我要怎么做。操作系统最喜欢这种编程范式了，操作系统几乎不用“思考”, 只要一对一的将代码翻译成指令就可以了。&lt;/li&gt;
&lt;li&gt;*在声明式 API 中，我们声明系统要执行的操作，系统将不断向该状态驱动。*声明式编程类似于“第二人称”， 也就是你要做什么，这有点“”产品经理”和“开发”之间的关系，“产品经理”只负责提需求，而“开发”怎么实现的，他并不关心&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;service-mesh服务网格&#34;&gt;&lt;a href=&#34;#service-mesh%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Service Mesh(服务网格)
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么使用服务网格&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序性一定程度上能取决于服务之间通信的速度和弹性。开发人员必须跨服务监控和优化应用程序，但由于系统的分布性质，他们很难获得可见性，在没有服务网格层时，开发人员把服务间的通信逻辑编码到每个服务中，当应用程序越来越大并且在同一个服务上同时运行多个实例时，微服务之间通信将会变得愈发复杂，业务代码和非业务代码糅合在一起。&lt;/li&gt;
&lt;li&gt;Service mesh 可以处理应用程序中服务之间的所有通信，同时提供了监控、记录、跟踪和流量控制等新功能。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格如何工作&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格如何工作
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;服务网格从单个服务中提取控制服务间通信的逻辑，并抽象到自己的基础设施层&lt;/strong&gt;（如 Istio）。它使用多个网络代理来路由和跟踪服务之间的通信。&lt;/p&gt;
&lt;p&gt;代理充当组织网络和微服务之间的中间网关。所有进出该服务的流量都通过代理服务器路由。代理有时被称为  &lt;em&gt;sidecar（直译为边车），sidercar 和微服务块并行运行&lt;/em&gt;，这些代理一起构成了服务网格层。&lt;/p&gt;
&lt;p&gt;下面的网格中，绿色是一个个微服务，代表不同的功能模块，蓝色就是每个微服务的代理他们从绿色的微服务中提取出来下沉到 Istio 等设施，负责服务间的通信、监控等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-4.png&#34;
	width=&#34;1247&#34;
	height=&#34;559&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-4_hu_dab316d06892a821.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-4_hu_e6cb678c3154ca66.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;223&#34;
		data-flex-basis=&#34;535px&#34;
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格优点&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e4%bc%98%e7%82%b9&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格优点  
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务发现&lt;/strong&gt;&lt;br&gt;
服务网格使用服务注册表来&lt;strong&gt;动态发现和跟踪&lt;/strong&gt;网格中的所有服务，减少管理服务端点的运维负担。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;br&gt;
服务网格使用各种算法（例如循环算法、最少连接或加权负载均衡）在多个服务实例之间&lt;strong&gt;智能地分配请求&lt;/strong&gt;。负载均衡可提高资源利用率并确保高可用性和可扩展性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量管理&lt;/strong&gt;&lt;br&gt;
服务网格提供高级&lt;strong&gt;流量管理&lt;/strong&gt;功能，可对请求路由和流量行为进行精细控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量分割&lt;/strong&gt;&lt;br&gt;
将传入流量划分到不同的服务版本或配置中。网格将一些流量引导到更新后的版本，从而以受控方式逐步推出变更。这样可以实现平稳过渡，并最大限度地降低变更的影响。&lt;/li&gt;
&lt;li&gt;*&lt;strong&gt;*安全性**&lt;/strong&gt;&lt;br&gt;
服务网格提供安全通信功能，例如双向 TLS 加密、身份验证和授权。&lt;/li&gt;
&lt;li&gt;*&lt;strong&gt;*监控**&lt;/strong&gt;&lt;br&gt;
服务网格提供全面的监控和可观测性功能，可深入了解服务的运行状况、性能和行为。监控还支持故障排除和性能优化。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格架构&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e6%9e%b6%e6%9e%84&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格架构
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;服务网格架构中有两个主要组成部分：控制面板和数据面板。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;数据面板&#34;&gt;&lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e9%9d%a2%e6%9d%bf&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;数据面板
&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;数据面板是服务网格的数据处理组件。它包括所有 sidecar 代理及其功能。当一个服务想要与其他服务通信时，sidecar 代理会采取以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sidecar 拦截请求&lt;/li&gt;
&lt;li&gt;它将请求封装在单独的网络连接中&lt;/li&gt;
&lt;li&gt;它在源代理和目标代理之间建立安全的加密通道&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;sidecar 代理处理服务之间的低级消息传递。它们还会实施断路和请求重试等功能，以增强弹性并防止服务降级。服务网格功能（例如负载均衡、服务发现和流量路由）在数据面板中实现。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h5 id=&#34;控制面板&#34;&gt;&lt;a href=&#34;#%e6%8e%a7%e5%88%b6%e9%9d%a2%e6%9d%bf&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;控制面板
&lt;/h5&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;控制面板是服务网格的中央管理和配置层。&lt;/li&gt;
&lt;li&gt;管理员可以通过控制面板在网格内定义和配置服务。例如，指定服务端点、路由规则、负载均衡策略和安全设置等参数。定义配置后，控制面板将必要信息分发到服务网格的数据面板。&lt;/li&gt;
&lt;li&gt;代理使用配置信息来决定如何处理传入的请求。它们还可以接收配置更改并动态调整其行为而无需重新启动或中断服务。&lt;/li&gt;
&lt;li&gt;控制面板通常包括以下功能：
&lt;ol&gt;
&lt;li&gt;跟踪网格内所有服务的服务注册表&lt;/li&gt;
&lt;li&gt;自动发现新服务并删除非活动服务&lt;/li&gt;
&lt;li&gt;收集和聚合遥测数据，例如指标、日志和分布式跟踪信息&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格和-k8s&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e5%92%8c-k8s&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格和 k8s
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;k8s“服务”资源是简化的 service mesh，它提供服务发现和请求的轮询调度均衡。完整的 service mesh 则提供更丰富的功能，如管理安全策略和加密、“断路”以暂停对缓慢响应的实例的请求以及如上所述的负载均衡等。 服务网格本质上是微服务治理，把服务治理，服务通讯，服务安全，服务监控等逻辑&lt;strong&gt;从业务逻辑代码中提取出来形成代理并下沉到 istio 等基础设施中，如下图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-5.png&#34;
	width=&#34;1294&#34;
	height=&#34;626&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-5_hu_4aeaa75368548342.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-5_hu_aa4544e33f253391.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;496px&#34;
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格面临的挑战&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e9%9d%a2%e4%b8%b4%e7%9a%84%e6%8c%91%e6%88%98&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格面临的挑战
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;复杂性&lt;/strong&gt;&lt;br&gt;
服务网格引入了其他基础设施组件、配置要求和部署注意事项，有一定的学习难度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运维管理费用&lt;/strong&gt;&lt;br&gt;
服务网格会带来部署、管理和监控数据面板代理和控制面板组件的额外开销。例如：
&lt;ul&gt;
&lt;li&gt;确保服务网格基础设施的高可用性和可扩展性&lt;/li&gt;
&lt;li&gt;监控代理的运行状况和性能&lt;/li&gt;
&lt;li&gt;处理升级和兼容性问题&lt;/li&gt;
&lt;li&gt;必须仔细设计和配置服务网格，以最大限度地减少对整个系统的性能影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成挑战&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;服务网格必须与现有基础设施无缝集成，才能执行其所需的功能。这包括容器编排平台、网络解决方案和技术堆栈中的其他工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;istio&#34;&gt;&lt;a href=&#34;#istio&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Istio
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://istio.io/latest/zh/docs/&#34;  title=&#34;Istio / 文档&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Istio / 文档&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Istio 是一个开源**服务治理框架。**Istio 的控制面板组件本身作为 k8s 工作负载运行。它使用 k8s 容器组（一组共享一个 IP 地址的紧密耦合的容器）作为 sidecar 代理设计的基础。提供了服务发现、负载均衡、路由、限流、链路监控、通信加密。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-6.png&#34;
	width=&#34;1580&#34;
	height=&#34;1165&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-6_hu_f144f8e6c8c01ca3.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-6_hu_18c6d0dfc318bbbf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
