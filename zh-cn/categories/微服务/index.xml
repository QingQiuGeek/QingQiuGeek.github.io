<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>微服务 on 青秋博客</title>
        <link>/zh-cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
        <description>Recent content in 微服务 on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Wed, 05 Feb 2025 16:56:07 +0000</lastBuildDate><atom:link href="/zh-cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>微服务概念入门：Nacos、OpenFeign、Sentinel、GateWay、Seata</title>
        <link>/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/</link>
        <pubDate>Wed, 05 Feb 2025 16:56:07 +0000</pubDate>
        
        <guid>/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/</guid>
        <description>&lt;h2 id=&#34;分布式基础&#34;&gt;&lt;a href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e5%9f%ba%e7%a1%80&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;分布式基础
&lt;/h2&gt;&lt;h3 id=&#34;微服务&#34;&gt;&lt;a href=&#34;#%e5%be%ae%e6%9c%8d%e5%8a%a1&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;微服务
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;所谓微服务，就是把传统的单体项目的各个服务拆分出来单独部署，每个&lt;strong&gt;小服务&lt;/strong&gt; 运行在&lt;strong&gt;自己&lt;/strong&gt; 的&lt;strong&gt;进程&lt;/strong&gt;中，他们之间通过 HTTP 调用进行通信。提高服务弹性、可维护性。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;集群分布式节点&#34;&gt;&lt;a href=&#34;#%e9%9b%86%e7%be%a4%e5%88%86%e5%b8%83%e5%bc%8f%e8%8a%82%e7%82%b9&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;  集群&amp;amp;分布式&amp;amp;节点
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;集群指的是将几台服务器集中在一起，实现同一业务。&lt;/li&gt;
&lt;li&gt;分布式是指将不同的业务分布在不同的地方，也就是多个节点。&lt;/li&gt;
&lt;li&gt;每个节点都可以做个集群，比如一个项目有 ABC 三个服务分别部署，这就是分布式，每个服务可能要部署在多个服务器提高并发量如 A1、A2、A3、B1、B2、B3，每个服务就形成了自己的集群。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;远程调用负载均衡&#34;&gt;&lt;a href=&#34;#%e8%bf%9c%e7%a8%8b%e8%b0%83%e7%94%a8%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;远程调用+负载均衡
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;各个微服务之间一般通过 http+json 完成调用，若 A 服务调用 B 服务，B 服务部署了多个服务器，那么 A 调用任意一个服务器均可完成功能。 为了使每一个服务器都不要太忙或者太闲，可以负载均衡的调用每一个服务器，提升网站的健壮性。&lt;/p&gt;
&lt;p&gt;常见负载均衡算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**轮询：**按顺序往后依次调用，然后循环。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最小连接：&lt;strong&gt;优先选择连接数最少，也就是压力最小的后端服务器，在&lt;/strong&gt;会话较长&lt;/strong&gt;的情况下可以考虑采取这种方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;散列：&lt;strong&gt;根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程度上保证特定用户能连接到相同的服务器。如果应用需要处理状态而要求用户&lt;/strong&gt;能连接到和之前相同的服务器&lt;/strong&gt;，可以考虑采取这种方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;服务注册发现注册中心&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c%e5%8f%91%e7%8e%b0%e6%b3%a8%e5%86%8c%e4%b8%ad%e5%bf%83&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;  服务注册发现&amp;amp;注册中心
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A 服务调用 B 服务，就得知道 B 服务的 IP 地址、哪个服务可以正常调用，哪个服务已经下线。解决这个问题可以引入注册中心；每个服务上线后把自己注册到注册中心，其他服务要调用时就从注册中心获取可调用的服务 IP 地址即可。
&lt;img src=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image.png&#34;
	width=&#34;1175&#34;
	height=&#34;562&#34;
	srcset=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image_hu_57f1523f87e323e5.png 480w, /zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image_hu_aa154e7a7b0a4e4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;501px&#34;
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;配置中心&#34;&gt;&lt;a href=&#34;#%e9%85%8d%e7%bd%ae%e4%b8%ad%e5%bf%83&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;配置中心
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;每个服务单独部署出来，可能配置是不同的，如果单独写死在服务上可维护扩展性差，为了满足灵活的配置变更，可以把所有服务的配置写在配置中心，让每个服务在配置中心获取自己的配置。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-1.png&#34;
	width=&#34;1324&#34;
	height=&#34;749&#34;
	srcset=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-1_hu_cd1f7f3cc93e33cc.png 480w, /zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-1_hu_72982482d973f46b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务熔断降级&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%86%94%e6%96%ad%e9%99%8d%e7%ba%a7&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务熔断&amp;amp;降级
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在微服务架构中，服务之间往往形成链式调用，A-&amp;gt;B-&amp;gt;C，假如在 B 服务不可用，可能会阻塞到该服务，导致后续的服务进来后也一直阻塞直到资源耗尽，整条链路发生雪崩，因此要有熔断和降级机制保护服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务熔断&lt;/strong&gt;&lt;br&gt;
设置服务的&lt;strong&gt;超时&lt;/strong&gt;，当被调用的服务在规定时间内没返回数据或达到一定失败次数，就触发断路保护机制，后来的请求不再去调用这个服务，本地直接返回默认的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务降级&lt;/strong&gt;&lt;br&gt;
在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级：某些服务不处理，或者简单处理【抛异常、返回 NULL、调用 Mock 数据、调用 Fallback 处理逻辑】&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;api-网关&#34;&gt;&lt;a href=&#34;#api-%e7%bd%91%e5%85%b3&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;API 网关
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一夫当关，万夫莫开。微服务的入口，一般抽象了微服务中都需要的公共功能，同时提供了客户端&lt;strong&gt;负载均衡&lt;/strong&gt;，&lt;strong&gt;服务自动熔断&lt;/strong&gt;，&lt;strong&gt;灰度发布&lt;/strong&gt;，&lt;strong&gt;统一认证&lt;/strong&gt;，&lt;strong&gt;限流流控&lt;/strong&gt;，&lt;strong&gt;日志统计&lt;/strong&gt;等丰富的功能。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-2.png&#34;
	width=&#34;1314&#34;
	height=&#34;578&#34;
	srcset=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-2_hu_50502fbfed1b898e.png 480w, /zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-2_hu_8d8f5d8816276138.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;227&#34;
		data-flex-basis=&#34;545px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;微服务解决方案工具&#34;&gt;&lt;a href=&#34;#%e5%be%ae%e6%9c%8d%e5%8a%a1%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%e5%b7%a5%e5%85%b7&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;微服务解决方案&amp;amp;工具
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;个人以为常用的微服务解决体系大概有两套，分别是 SpringCloud 和 SpringCloudAlibaba，比如 API 网关，SpringCloud 用的是 GateWay，SpringCloudAlibaba 则是 Higress，当然两者的各个工具也是可以混用的。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://spring.io/projects/spring-cloud&#34;  title=&#34;Spring Cloud&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sca.aliyun.com/&#34;  title=&#34;Spring Cloud Alibaba官网_基于Springboot的微服务教程-阿里云&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Cloud Alibaba 官网_基于 Springboot 的微服务教程-阿里云&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;nacos&#34;&gt;&lt;a href=&#34;#nacos&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Nacos
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Nacos 通常作为注册配置中心，用于服务注册、发现、配置管理等&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;面试题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-3.png&#34;
	width=&#34;1568&#34;
	height=&#34;997&#34;
	srcset=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-3_hu_42d6d69e0c4d884b.png 480w, /zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-3_hu_6e956068d8e7be1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;377px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;openfeign&#34;&gt;&lt;a href=&#34;#openfeign&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt; OpenFeign
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;OpenFeign 是一个&lt;strong&gt;声明式&lt;/strong&gt;http 远程调用工具，底层内置 Ribbon，可以直接&lt;strong&gt;根据服务名称去注册中心&lt;/strong&gt;拿到指定的&lt;strong&gt;可用服务 IP 集合&lt;/strong&gt;，并进行&lt;strong&gt;负载均衡&lt;/strong&gt;式的调用，还可以设置超时、重试机制、兜底返回 fallback，该方式简化了微服务之间的通信，减少了代码编写。&lt;/p&gt;
&lt;p&gt;除了声明式，还有编程式 RestTemplate，该方式需要在代码中手动编程调用。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;有意思的是，如果 MVC 的注解写在 controll 层就是接受请求，写在 FeignClient 就是发送请求，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-4.png&#34;
	width=&#34;1437&#34;
	height=&#34;681&#34;
	srcset=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-4_hu_5c50ae4f0a292032.png 480w, /zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-4_hu_b95f9d56e1854889.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;211&#34;
		data-flex-basis=&#34;506px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;客户端和服务端负载均衡区别&#34;&gt;&lt;a href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af%e5%92%8c%e6%9c%8d%e5%8a%a1%e7%ab%af%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e5%8c%ba%e5%88%ab&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;客户端和服务端负载均衡区别
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-5.png&#34;
	width=&#34;1234&#34;
	height=&#34;854&#34;
	srcset=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-5_hu_42e4199976fa06d9.png 480w, /zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-5_hu_53a4a3ecb3d848fe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;144&#34;
		data-flex-basis=&#34;346px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;sentinel&#34;&gt;&lt;a href=&#34;#sentinel&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Sentinel
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;资源&amp;amp;规则&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有 web 接口皆可视为资源，除此之外还要设置资源的访问规则，如流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则、热点参数规则
&lt;img src=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-6.png&#34;
	width=&#34;830&#34;
	height=&#34;991&#34;
	srcset=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-6_hu_2f097aed61eeb2cd.png 480w, /zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-6_hu_c84509dc15e5a757.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;83&#34;
		data-flex-basis=&#34;201px&#34;
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-7.png&#34;
	width=&#34;1144&#34;
	height=&#34;585&#34;
	srcset=&#34;/zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-7_hu_d8e06d9027edde4.png 480w, /zh-cn/post/2025/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8nacosopenfeignsentinelgatewayseata/image-7_hu_73308f5be221ec19.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;469px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;gateway&#34;&gt;&lt;a href=&#34;#gateway&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Gateway
&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;seata&#34;&gt;&lt;a href=&#34;#seata&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Seata
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;分布式事务的解决方案，一个购买操作涉及账户、订单、库存三个服务，每个服务分别部署，其数据库也不同，单个子操作的事务是一致性的，但是要保证三个子操作的事务一致性。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>云原生--微服务、CI/CD、SaaS、PaaS、IaaS</title>
        <link>/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/</link>
        <pubDate>Fri, 11 Oct 2024 12:00:00 +0000</pubDate>
        
        <guid>/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;介绍云原生之前，我们先介绍一下 CNCF，全称为 Cloud Native Computing Foundation，中文译为&amp;quot;&lt;strong&gt;云原生计算基金会&lt;/strong&gt;&amp;quot;。CNCF 致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。所以说，CNCF 是云原生领域影响力最大最有话语权的组织。以下是 CNCF 对云原生的定义：&lt;/p&gt;
&lt;p&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。&lt;strong&gt;云原生的代表技术包括容器、&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/product/tcm?from_column=20065&amp;amp;from=20065&#34;  title=&#34;服务网格&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;服务网格&lt;/a&gt;&lt;strong&gt;、微服务、不可变基础设施和声明式&lt;/strong&gt; &lt;strong&gt;API&lt;/strong&gt; &lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;云原生概念和特点&#34;&gt;&lt;a href=&#34;#%e4%ba%91%e5%8e%9f%e7%94%9f%e6%a6%82%e5%bf%b5%e5%92%8c%e7%89%b9%e7%82%b9&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;云原生概念和特点
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;概念&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;云原生是一种**构建和运行应用程序的方法，程序生于云端，长于云端。**从有构建应用的想法开始，到需求、设计、开发、测试、构建、打包、部署所有的软件生命周期全部都在云平台上面进行，从应用设计之初（技术选型、架构设计、编译机制）就充分考虑并符合了云的特征，在云平台以最佳姿态原型、为企业降本增效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;弹性扩缩容：本地部署的传统应用无法动态扩展，往往需要冗余资源以抵抗流量高峰，而云原生应用利用云的弹性自动伸缩，应用程序快速复制扩展、部署。&lt;/li&gt;
&lt;li&gt;快速启停：应用程序可以快速启停以应对流量变化&lt;/li&gt;
&lt;li&gt;隔离性强：进程级别的故障隔离&lt;/li&gt;
&lt;li&gt;CICD：持续集成、持续交付、持续部署&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;常见云模式&#34;&gt;&lt;a href=&#34;#%e5%b8%b8%e8%a7%81%e4%ba%91%e6%a8%a1%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;常见云模式
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;公有云&lt;/strong&gt;&lt;br&gt;
阿里云、华为云、腾讯云、百度云等等，只需购买就能使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私有云&lt;/strong&gt;&lt;br&gt;
自己搭建或购买的私有平台，使用对象通常是政府、金融机构和企业&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合云：&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://www.ibm.com/cn-zh/think/insights/hybrid-cloud-advantages-disadvantages&#34;  title=&#34;混合云的优缺点 | IBM&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;混合云的优缺点 | IBM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行业云&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;云对外提供服务的架构模式&#34;&gt;&lt;a href=&#34;#%e4%ba%91%e5%af%b9%e5%a4%96%e6%8f%90%e4%be%9b%e6%9c%8d%e5%8a%a1%e7%9a%84%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;云对外提供服务的架构模式
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image.png&#34;
	width=&#34;609&#34;
	height=&#34;426&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image_hu_986c3e62ec5817a9.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image_hu_e6b4f0e15c46160d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;343px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;iaasinfrastructure-as-a-service&#34;&gt;&lt;a href=&#34;#iaasinfrastructure-as-a-service&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;IaaS(Infrastructure-as-a-Service)
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基础设施即服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向外提供硬件资源等基础设施，包括计算、存储、网络等等，用户可以基于基础设施进行上层应用开发部署。&lt;/p&gt;
&lt;p&gt;拿租房比喻就是提供毛坯房，自己装水电、置办家具。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;paasplatform-as-a-service&#34;&gt;&lt;a href=&#34;#paasplatform-as-a-service&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;PaaS(Platform-as-a-Service)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;平台即服务&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;向外提供平台组件服务，如操作系统、数据库。&lt;/p&gt;
&lt;p&gt;拿租房比喻就是提供装好水电的房子，自己只需置办家具即可入住。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;saassoftware-as-a-service&#34;&gt;&lt;a href=&#34;#saassoftware-as-a-service&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;SaaS(SoftWare-as-a-Service)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;软件即服务&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直接向外提供一款成品应用型服务，屏蔽了用户对软件底层的基础设施，用户只需要拿来使用即可。如钉钉、企业微信。&lt;/p&gt;
&lt;p&gt;拿租房比喻就是提供装好水电、家具的房子，直接交租金就拎包入住。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;faasfunction-as-a-service&#34;&gt;&lt;a href=&#34;#faasfunction-as-a-service&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;FaaS(Function-as-a-Service)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;功能即服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ibm.com/cn-zh/topics/faas&#34;  title=&#34;https://www.ibm.com/cn-zh/topics/faas&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ibm.com/cn-zh/topics/faas&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FaaS 是一种云计算服务，专注于事件驱动，在有请求时自动启动服务，没有时自动关闭服务。
Serverless 和 FaaS 经常被混为一谈，我认为  &lt;strong&gt;FaaS 算是无服务器的子集&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;无服务器专注于所有服务类别，无论是计算、存储、数据库、消息传递还是 API 网关等。其中服务器的配置、管理和计费对最终用户不可见，用户只需要对服务按需付费即可。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;云原生核心技术栈&#34;&gt;&lt;a href=&#34;#%e4%ba%91%e5%8e%9f%e7%94%9f%e6%a0%b8%e5%bf%83%e6%8a%80%e6%9c%af%e6%a0%88&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;云原生核心技术栈
&lt;/h2&gt;&lt;h3 id=&#34;微服务&#34;&gt;&lt;a href=&#34;#%e5%be%ae%e6%9c%8d%e5%8a%a1&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;微服务
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单体架构&lt;/strong&gt;：把业务所有功能集中在一个项目中开发，以整个系统为单位进行部署，这种架构简单，如果某一业务的请求量非常大，那么是无法单独扩展该业务的，只能拷贝整个单体应用，再部署一套环境，来实现集群。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微服务架构&lt;/strong&gt;：根据业务把整个项目划分成多个功能模块，比如订单模块、购物车模块、支付模块、商品详情模块等等，模块之间通过 http 或者 RPC 进行通信。这种架构降低了服务耦合，有利于服务扩展，同时每个服务模块实现了故障隔离，提高了可用性！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpringCloud 就是微服务中具有代表性的一个技术栈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-1.png&#34;
	width=&#34;946&#34;
	height=&#34;549&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-1_hu_f7c7b50f88d8ca66.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-1_hu_524bcc656b205137.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;413px&#34;
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;容器技术-dockerk8s&#34;&gt;&lt;a href=&#34;#%e5%ae%b9%e5%99%a8%e6%8a%80%e6%9c%af-dockerk8s&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;容器技术-Docker、K8S
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;所谓容器，对操作系统（通常为 Linux）进行虚拟化，具有比虚拟机更高的可移植性和资源效率，可以解决环境差异带来的部署等问题。&lt;/p&gt;
&lt;p&gt;我们把单体项目拆成了微服务，各个微服务模块所需的部署环境可能大不相同，那么不妨把每个微服务模块放到容器中，这个容器包含了服务模块运行所需的除操作系统内容以外所需的函数、配置、依赖等，类似 exe 安装包，这就不仅解决了环境差异带来的应用部署问题，而且各个容器之间实现&lt;strong&gt;进程隔离&lt;/strong&gt;，容器启动速度也更快。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以 Docker 容器为资源分割和调度的基本单位，封装整个软件运行时的环境，然后发布到 Linux 机器上。&lt;/p&gt;
&lt;p&gt;按照 Docker 的设计方案，应用软件的交付过程如同海上运输，操作系统如同一个货轮，操作系统上的软件都如同一个集装箱。用户可以通过标准化手段自由组装运行环境，同时集装箱的内容可以由用户自定义，然后使用 k8s 编排管理容器的生命周期。如此一来，交付一个应用软件产品，就相当于交付一系列标准化组件的集合。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;devopscicd&#34;&gt;&lt;a href=&#34;#devopscicd&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;DevOps&amp;amp;CI/CD
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Development 和 Operations，即开发运维一体化，涉及软件在整个开发生命周期中的持续开发，持续测试，持续集成，持续部署和持续监控。简单来说是开发和运维之间地高度协同，实现全生命周期的工具全链路打通与自动化、跨团队的线上&lt;strong&gt;协作能力&lt;/strong&gt;。完成高频率部署的同时，提高生产环境的可靠性、稳定性、弹性和安全性。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-2.png&#34;
	width=&#34;1135&#34;
	height=&#34;687&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-2_hu_a1086855647d301d.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-2_hu_8acff9975cd5bcbc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;396px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CI：持续集成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持续集成：开发团队通过将代码的不同部分通过&lt;strong&gt;版本控制系统&lt;/strong&gt;集成到共享存储库中，系统可以自动频繁地进行构建和测试，以确保代码的一致性和稳定性。，一定程度上避免代码冲突和重复劳动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CD：持续交付、持续部署&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立在持续集成的基础上，持续交付后的代码处于待发布状态，系统随时可以自动快速地部署到生产环境中，确保应用始终是最新的，支持&lt;strong&gt;频繁变更和金丝雀发布&lt;/strong&gt;。代表产品有阿里云的 Serverless 应用引擎 SAE。&lt;a class=&#34;link&#34; href=&#34;https://www.aliyun.com/product/aliware/sae?spm=5176.21213303.J_qCOwPWspKEuWcmp8qiZNQ.1.2ac62f3dtZNEdX&amp;amp;scm=20140722.S_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@953616._.ID_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@953616-RL_sae-LOC_llm-OR_ser-PAR1_213e37c817285702237838876e1c63-V_3-RE_new2@@cardNew&#34;  title=&#34;Serverless 应用引擎SAE_应用托管服务_零代码改造上云_容器与中间件-阿里云&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Serverless 应用引擎 SAE_应用托管服务_零代码改造上云_容器与中间件-阿里云&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;serverless&#34;&gt;&lt;a href=&#34;#serverless&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Serverless
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.redhat.com/zh/topics/cloud-native-apps/what-is-serverless&#34;  title=&#34;Serverless 是什么？无服务器架构简介-红帽&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Serverless 是什么？无服务器架构简介-红帽&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/857454&#34;  title=&#34;一文读懂 Serverless 的起源、发展和落地实践-阿里云开发者社区&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一文读懂 Serverless 的起源、发展和落地实践-阿里云开发者社区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-3.png&#34;
	width=&#34;823&#34;
	height=&#34;484&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-3_hu_222d0db168477d30.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-3_hu_eda9006e95d083db.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Serverless 并不是不需要服务器，而是将服务器全权托管给了云厂商，用户聚焦业务代码，无需关心管理服务器，只用把业务部署到平台的容器上，服务器能自动进行弹性伸缩，这些容器在&lt;strong&gt;被调用时会自动按需启动&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;不可变基础设施&#34;&gt;&lt;a href=&#34;#%e4%b8%8d%e5%8f%af%e5%8f%98%e5%9f%ba%e7%a1%80%e8%ae%be%e6%96%bd&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;不可变基础设施
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在传统的可变服务器基础架构中，开发人员操作服务器，手动升级或降级软件包，逐个服务器地调整配置文件，服务器会不断更新和修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可变基础设施通常会导致以下问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持续的修改服务器，缺乏标准，易引入不稳定因素，会导致灾难发生后很难重新构建起等效的新服务。&lt;/p&gt;
&lt;p&gt;而不可变基础设施，最基本的指运行服务的服务器在完成部署后，就不在进行更改，如果配置发生了改变就会生成新的容器，旧容器直接销毁。这就保证了基础架构中更高的一致性和可靠性，以及更简单，更可预测的部署过程。这样云原生就有了稳定的基石！&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;声明式-apik8s&#34;&gt;&lt;a href=&#34;#%e5%a3%b0%e6%98%8e%e5%bc%8f-apik8s&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;声明式 API(k8s)
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;在命令式 API 中，我们可以直接发出服务器要执行的命令，例如：&lt;/em&gt; *“运行容器”、“停止容器”等。*通俗的说，命令式编程是第一人称，我要做什么，我要怎么做。操作系统最喜欢这种编程范式了，操作系统几乎不用“思考”, 只要一对一的将代码翻译成指令就可以了。&lt;/li&gt;
&lt;li&gt;*在声明式 API 中，我们声明系统要执行的操作，系统将不断向该状态驱动。*声明式编程类似于“第二人称”， 也就是你要做什么，这有点“”产品经理”和“开发”之间的关系，“产品经理”只负责提需求，而“开发”怎么实现的，他并不关心&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;service-mesh服务网格&#34;&gt;&lt;a href=&#34;#service-mesh%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Service Mesh(服务网格)
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么使用服务网格&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序性一定程度上能取决于服务之间通信的速度和弹性。开发人员必须跨服务监控和优化应用程序，但由于系统的分布性质，他们很难获得可见性，在没有服务网格层时，开发人员把服务间的通信逻辑编码到每个服务中，当应用程序越来越大并且在同一个服务上同时运行多个实例时，微服务之间通信将会变得愈发复杂，业务代码和非业务代码糅合在一起。&lt;/li&gt;
&lt;li&gt;Service mesh 可以处理应用程序中服务之间的所有通信，同时提供了监控、记录、跟踪和流量控制等新功能。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格如何工作&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格如何工作
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;服务网格从单个服务中提取控制服务间通信的逻辑，并抽象到自己的基础设施层&lt;/strong&gt;（如 Istio）。它使用多个网络代理来路由和跟踪服务之间的通信。&lt;/p&gt;
&lt;p&gt;代理充当组织网络和微服务之间的中间网关。所有进出该服务的流量都通过代理服务器路由。代理有时被称为  &lt;em&gt;sidecar（直译为边车），sidercar 和微服务块并行运行&lt;/em&gt;，这些代理一起构成了服务网格层。&lt;/p&gt;
&lt;p&gt;下面的网格中，绿色是一个个微服务，代表不同的功能模块，蓝色就是每个微服务的代理他们从绿色的微服务中提取出来下沉到 Istio 等设施，负责服务间的通信、监控等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-4.png&#34;
	width=&#34;1247&#34;
	height=&#34;559&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-4_hu_dab316d06892a821.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-4_hu_e6cb678c3154ca66.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;223&#34;
		data-flex-basis=&#34;535px&#34;
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格优点&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e4%bc%98%e7%82%b9&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格优点  
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务发现&lt;/strong&gt;&lt;br&gt;
服务网格使用服务注册表来&lt;strong&gt;动态发现和跟踪&lt;/strong&gt;网格中的所有服务，减少管理服务端点的运维负担。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;br&gt;
服务网格使用各种算法（例如循环算法、最少连接或加权负载均衡）在多个服务实例之间&lt;strong&gt;智能地分配请求&lt;/strong&gt;。负载均衡可提高资源利用率并确保高可用性和可扩展性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量管理&lt;/strong&gt;&lt;br&gt;
服务网格提供高级&lt;strong&gt;流量管理&lt;/strong&gt;功能，可对请求路由和流量行为进行精细控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量分割&lt;/strong&gt;&lt;br&gt;
将传入流量划分到不同的服务版本或配置中。网格将一些流量引导到更新后的版本，从而以受控方式逐步推出变更。这样可以实现平稳过渡，并最大限度地降低变更的影响。&lt;/li&gt;
&lt;li&gt;*&lt;strong&gt;*安全性**&lt;/strong&gt;&lt;br&gt;
服务网格提供安全通信功能，例如双向 TLS 加密、身份验证和授权。&lt;/li&gt;
&lt;li&gt;*&lt;strong&gt;*监控**&lt;/strong&gt;&lt;br&gt;
服务网格提供全面的监控和可观测性功能，可深入了解服务的运行状况、性能和行为。监控还支持故障排除和性能优化。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格架构&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e6%9e%b6%e6%9e%84&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格架构
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;服务网格架构中有两个主要组成部分：控制面板和数据面板。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;数据面板&#34;&gt;&lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e9%9d%a2%e6%9d%bf&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;数据面板
&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;数据面板是服务网格的数据处理组件。它包括所有 sidecar 代理及其功能。当一个服务想要与其他服务通信时，sidecar 代理会采取以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sidecar 拦截请求&lt;/li&gt;
&lt;li&gt;它将请求封装在单独的网络连接中&lt;/li&gt;
&lt;li&gt;它在源代理和目标代理之间建立安全的加密通道&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;sidecar 代理处理服务之间的低级消息传递。它们还会实施断路和请求重试等功能，以增强弹性并防止服务降级。服务网格功能（例如负载均衡、服务发现和流量路由）在数据面板中实现。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h5 id=&#34;控制面板&#34;&gt;&lt;a href=&#34;#%e6%8e%a7%e5%88%b6%e9%9d%a2%e6%9d%bf&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;控制面板
&lt;/h5&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;控制面板是服务网格的中央管理和配置层。&lt;/li&gt;
&lt;li&gt;管理员可以通过控制面板在网格内定义和配置服务。例如，指定服务端点、路由规则、负载均衡策略和安全设置等参数。定义配置后，控制面板将必要信息分发到服务网格的数据面板。&lt;/li&gt;
&lt;li&gt;代理使用配置信息来决定如何处理传入的请求。它们还可以接收配置更改并动态调整其行为而无需重新启动或中断服务。&lt;/li&gt;
&lt;li&gt;控制面板通常包括以下功能：
&lt;ol&gt;
&lt;li&gt;跟踪网格内所有服务的服务注册表&lt;/li&gt;
&lt;li&gt;自动发现新服务并删除非活动服务&lt;/li&gt;
&lt;li&gt;收集和聚合遥测数据，例如指标、日志和分布式跟踪信息&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格和-k8s&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e5%92%8c-k8s&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格和 k8s
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;k8s“服务”资源是简化的 service mesh，它提供服务发现和请求的轮询调度均衡。完整的 service mesh 则提供更丰富的功能，如管理安全策略和加密、“断路”以暂停对缓慢响应的实例的请求以及如上所述的负载均衡等。 服务网格本质上是微服务治理，把服务治理，服务通讯，服务安全，服务监控等逻辑&lt;strong&gt;从业务逻辑代码中提取出来形成代理并下沉到 istio 等基础设施中，如下图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-5.png&#34;
	width=&#34;1294&#34;
	height=&#34;626&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-5_hu_4aeaa75368548342.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-5_hu_aa4544e33f253391.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;496px&#34;
	
&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务网格面临的挑战&#34;&gt;&lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%bd%91%e6%a0%bc%e9%9d%a2%e4%b8%b4%e7%9a%84%e6%8c%91%e6%88%98&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;服务网格面临的挑战
&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;复杂性&lt;/strong&gt;&lt;br&gt;
服务网格引入了其他基础设施组件、配置要求和部署注意事项，有一定的学习难度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运维管理费用&lt;/strong&gt;&lt;br&gt;
服务网格会带来部署、管理和监控数据面板代理和控制面板组件的额外开销。例如：
&lt;ul&gt;
&lt;li&gt;确保服务网格基础设施的高可用性和可扩展性&lt;/li&gt;
&lt;li&gt;监控代理的运行状况和性能&lt;/li&gt;
&lt;li&gt;处理升级和兼容性问题&lt;/li&gt;
&lt;li&gt;必须仔细设计和配置服务网格，以最大限度地减少对整个系统的性能影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成挑战&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;服务网格必须与现有基础设施无缝集成，才能执行其所需的功能。这包括容器编排平台、网络解决方案和技术堆栈中的其他工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;istio&#34;&gt;&lt;a href=&#34;#istio&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Istio
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://istio.io/latest/zh/docs/&#34;  title=&#34;Istio / 文档&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Istio / 文档&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Istio 是一个开源**服务治理框架。**Istio 的控制面板组件本身作为 k8s 工作负载运行。它使用 k8s 容器组（一组共享一个 IP 地址的紧密耦合的容器）作为 sidecar 代理设计的基础。提供了服务发现、负载均衡、路由、限流、链路监控、通信加密。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-6.png&#34;
	width=&#34;1580&#34;
	height=&#34;1165&#34;
	srcset=&#34;/zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-6_hu_f144f8e6c8c01ca3.png 480w, /zh-cn/post/2024/10/%E4%BA%91%E5%8E%9F%E7%94%9F--%E5%BE%AE%E6%9C%8D%E5%8A%A1ci/cdsaaspaasiaas/image-6_hu_18c6d0dfc318bbbf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
