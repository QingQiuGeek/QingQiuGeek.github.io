<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>AOF on 青秋博客</title>
        <link>/zh-cn/categories/aof/</link>
        <description>Recent content in AOF on 青秋博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>青秋博客</copyright>
        <lastBuildDate>Sun, 28 Jul 2024 00:12:57 +0000</lastBuildDate><atom:link href="/zh-cn/categories/aof/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Redis持久化机制--RDB和AOF</title>
        <link>/zh-cn/post/2024/07/redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6--rdb%E5%92%8Caof/</link>
        <pubDate>Sun, 28 Jul 2024 00:12:57 +0000</pubDate>
        
        <guid>/zh-cn/post/2024/07/redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6--rdb%E5%92%8Caof/</guid>
        <description>&lt;p&gt;Redis 是一个&lt;strong&gt;内存数据库&lt;/strong&gt; ，所以其运行效率非常高。但也存在一个问题：内存中的数据 是不持久的，&lt;strong&gt;若主机宕机或 Redis 关机重启，则内存中的数据全部丢失。因此&lt;/strong&gt; Redis 具有&lt;strong&gt;持久化功能&lt;/strong&gt; ，&lt;strong&gt;Redis通过数据快照或追加操作日志的形式将数据持久化到磁盘。&lt;/strong&gt; 根据持久化使用技术的不同，Redis 的持久化分为两种：&lt;strong&gt;RDB 与 AOF。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当系统重新启动时，会自动加载持久化文件，并根据文件中数据库状态描述信息将数据恢复到内存中。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;1rdb&#34;&gt;&lt;a href=&#34;#1rdb&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;1.RDB
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;RDB（Redis DataBase）是Redis&lt;strong&gt;默认开启&lt;/strong&gt; 的持久化⽅式，是指&lt;strong&gt;将内存中某一时刻的数据快照全量写入到指定的 rdb 文件中&lt;/strong&gt; 。当 Redis 启动时会自动读取rdb快照文件，&lt;strong&gt;将数据从硬盘载入到内存&lt;/strong&gt;，以恢复 Redis 关机前的数据库状态。&lt;/li&gt;
&lt;li&gt;由于RDB是生成的数据快照，&lt;strong&gt;因此⽣成的 RDB⽂件⾮常适合⽤于全量复制、数据备份等场景&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;RDB创建数据快照的时间间隔可以通过redis.conf配置文件中的&amp;quot;save&amp;quot;配置选项进⾏设置或者通过命令即时创建快照，如&amp;quot;save 900 1&amp;quot;表示如果900秒内有⾄少1个key变化，则创建⼀个snapshots快照。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;11-rdb持久化命令&#34;&gt;&lt;a href=&#34;#11-rdb%e6%8c%81%e4%b9%85%e5%8c%96%e5%91%bd%e4%bb%a4&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;1.1 RDB持久化命令
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;save&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 save 命令可立即进行一次持久化保存。save 命令是同步保存操作，&lt;strong&gt;由Redis主进程执行，因此执行期间会&lt;strong&gt;&lt;strong&gt;阻塞主进程&lt;/strong&gt;&lt;/strong&gt;，Redis 不能处理任何读写请求。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bgsave&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 bgsave 命令可立即进行一次持久化保存，&lt;strong&gt;主进程会 fork 出一个子进程&lt;/strong&gt; ，由该子进程负责完成保存过程。在子进程进行保存过程中，&lt;strong&gt;不会阻塞 redis-server 进程对客户端读写请求的处理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fork()&lt;/strong&gt; 函数是用于在操作系统中创建新进程的系统调用。它会将当前进程的内存内容完整地复制到内存的另一个区域，从而创建一个新的子进程。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;12-rdb持久化过程&#34;&gt;&lt;a href=&#34;#12-rdb%e6%8c%81%e4%b9%85%e5%8c%96%e8%bf%87%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;1.2 RDB持久化过程
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/57062c5e1f0d4ed2bcc5489f1bc44be7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在进行持久化过程中，如果主进程接收到了用户写请求，则系统会将内存中发生数据修改的物理块 copy 出一个副本。等内存中的全量数据 copy 结束后，会再将 副本中的数据 copy 到 RDB 临时文件。这个副本的生成是由于**Linux 系统的写时复制技术 （Copy-On-Write）**实现的。&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/eb0f3f7f8c8a462e974748a90d803bab.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/h2&gt;&lt;h2 id=&#34;2aof&#34;&gt;&lt;a href=&#34;#2aof&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;2.AOF
&lt;/h2&gt;&lt;p&gt;AOF 持久性记录服务器接收到的每个写操作。然后在服务器启动时再次重复执行这些操作，从⽽重建原始数据集。&lt;/p&gt;
&lt;h3 id=&#34;21-aof持久化过程&#34;&gt;&lt;a href=&#34;#21-aof%e6%8c%81%e4%b9%85%e5%8c%96%e8%bf%87%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;2.1 AOF持久化过程
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;命令追加（append）&lt;/strong&gt;：所有的写命令会追加到 AOF 缓冲区中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件写入（write）&lt;/strong&gt; ：将 AOF 缓冲区的数据写入到 AOF 文件过程中要调用&lt;code&gt;write&lt;/code&gt;函数（系统调用），&lt;code&gt;write先把&lt;/code&gt;数据写到系统内核缓冲区后直接返回，此时还没写到磁盘AOF文件中（延迟写）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件同步（fsync）&lt;/strong&gt; ：AOF 缓冲区根据对应的持久化方式（ &lt;code&gt;fsync&lt;/code&gt; 策略）向硬盘做同步操作。这一步需要调用 &lt;code&gt;fsync&lt;/code&gt; 函数（系统调用）进行强制硬盘同步，&lt;code&gt;fsync&lt;/code&gt; 将阻塞直到写入磁盘完成后返回，保证了数据持久化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件重写（rewrite）&lt;/strong&gt;：随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在 rewrite 过程中又有写操作命令追加，那么这些数据会暂时写入 aof_rewrite_buf 缓冲区。等将全部 rewrite 计算结果写入临时文件后，会先将&lt;strong&gt;AOF重写缓冲区&lt;/strong&gt; 中 的数据&lt;strong&gt;追加&lt;/strong&gt; 到临时文件，然后再 rename 为磁盘文件的原名称，覆盖原文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/5d4bd7f73ed84d3a9814962ad9018637.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;br&gt;
&lt;code&gt;write&lt;/code&gt;：写入系统内核缓冲区之后直接返回（仅仅是写到缓冲区），不会立即同步到硬盘。虽然提高了效率，但也带来了数据丢失的风险。同步硬盘操作通常依赖于系统调度机制，Linux 内核通常为 30s 同步一次，具体值取决于写出的数据量和 I/O 缓冲区的状态。&lt;br&gt;
&lt;code&gt;fsync&lt;/code&gt;：强制刷新系统内核缓冲区（同步到磁盘），确保写磁盘操作结束才会返回。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;22-aof持久化fsync策略&#34;&gt;&lt;a href=&#34;#22-aof%e6%8c%81%e4%b9%85%e5%8c%96fsync%e7%ad%96%e7%95%a5&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;2.2 AOF持久化fsync策略
&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appendfsync always&lt;/code&gt;：主线程调用 &lt;code&gt;write&lt;/code&gt; 执行写操作后，后台线程（ &lt;code&gt;aof_fsync&lt;/code&gt; 线程）&lt;strong&gt;立即调用&lt;/strong&gt; &lt;code&gt;fsync&lt;/code&gt; 函数同步 AOF 文件（刷盘），&lt;code&gt;fsync&lt;/code&gt; 完成后线程返回，这样会严重降低 Redis 的性能（&lt;code&gt;write&lt;/code&gt; + &lt;code&gt;fsync&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appendfsync everysec&lt;/code&gt;：主线程调用 &lt;code&gt;write&lt;/code&gt; 执行写操作后立即返回，由后台线程（ &lt;code&gt;aof_fsync&lt;/code&gt; 线程）&lt;strong&gt;每秒钟调用 &lt;code&gt;fsync&lt;/code&gt; 函数&lt;/strong&gt; （系统调用）同步一次 AOF 文件（&lt;code&gt;write&lt;/code&gt;+&lt;code&gt;fsync&lt;/code&gt;，&lt;code&gt;fsync&lt;/code&gt;间隔为 1 秒）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appendfsync no&lt;/code&gt;：主线程调用 &lt;code&gt;write&lt;/code&gt; 执行写操作后立即返回，让操作系统决定何时进行同步，Linux 下一般为 30 秒一次（&lt;code&gt;write&lt;/code&gt;但不&lt;code&gt;fsync&lt;/code&gt;，&lt;code&gt;fsync&lt;/code&gt; 的时机由操作系统决定）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了兼顾数据和写入性能，可以考虑 &lt;code&gt;appendfsync everysec&lt;/code&gt; 选项 ，让 Redis 每秒同步一次 AOF 文件。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;23-aof文件拆分&#34;&gt;&lt;a href=&#34;#23-aof%e6%96%87%e4%bb%b6%e6%8b%86%e5%88%86&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;2.3 AOF文件拆分
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/RnoPPL7jiFSKkx3G4p57Pg&#34;  title=&#34;从Redis7.0发布看Redis的过去与未来&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从Redis7.0发布看Redis的过去与未来&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从 Redis 7.0.0 开始，Redis 使用了 &lt;strong&gt;Multi Part AOF&lt;/strong&gt; 机制。顾名思义，Multi Part AOF 就是将原来的单个 AOF 文件拆分成多个 AOF 文件。在 Multi Part AOF 中，AOF 文件被分为三种类型，分别为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;BASE：表示基础 AOF 文件，它一般由子进程通过重写产生，该文件最多只有一个。&lt;/li&gt;
&lt;li&gt;INCR：表示增量 AOF 文件，它一般会在 AOFRW 开始执行时被创建，该文件可能存在多个。&lt;/li&gt;
&lt;li&gt;HISTORY：表示历史 AOF 文件，它由 BASE 和 INCR AOF 变化而来，每次 AOFRW 成功完成时，本次 AOFRW 之前对应的 BASE 和 INCR AOF 都将变为 HISTORY，HISTORY 类型的 AOF 会被 Redis 自动删除。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;br /&gt;
&lt;h3 id=&#34;24为什么aof是执行完命令才记录日志&#34;&gt;&lt;a href=&#34;#24%e4%b8%ba%e4%bb%80%e4%b9%88aof%e6%98%af%e6%89%a7%e8%a1%8c%e5%ae%8c%e5%91%bd%e4%bb%a4%e6%89%8d%e8%ae%b0%e5%bd%95%e6%97%a5%e5%bf%97&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;2.4为什么AOF是执行完命令才记录日志
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;关系型数据库（如 MySQL）通常都是执行命令之前记录日志（方便故障恢复），而 Redis AOF 持久化机制是在执行完命令之后再记录日志。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免额外的检查开销：AOF 记录日志不会对命令进行语法检查，如果先写入日志结果命令出错，则还得修改日志；&lt;/li&gt;
&lt;li&gt;**不会阻塞当前写操作命令的执行：**先写日志然后执行命令，结果命令出错，还得回去改日志，就阻塞了当前命令，甚至影响下一个命令。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;25-aof重写&#34;&gt;&lt;a href=&#34;#25-aof%e9%87%8d%e5%86%99&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;2.5 AOF重写
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;什么是重写？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着执行的写命令越来越多，AOF文件也越来越大，为解决这一问题，要对AOF压缩，即重写。假如先后执行了set num:1和set:num:2，实际结果是2，那么重写后就不需要set num:1这个记录了。&lt;/p&gt;
&lt;p&gt;重写过程中会把新数据记录到新的aof文件，防止对原先的aof文件造成污染。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;redis 的重写 AOF 过程是通过fork系统调用生成&lt;strong&gt;后台子进程 &lt;em&gt;bgrewriteaof&lt;/em&gt;&lt;/strong&gt; 来完成的**，** 如果在 rewrite 过程中又有写操作命令追加，那么这些数据会暂时写入 aof_rewrite_buf 缓冲区。等将全部 rewrite 计算结果写入临时文件后，会先将&lt;strong&gt;AOF重写缓冲区&lt;/strong&gt; 中 的数据&lt;strong&gt;追加&lt;/strong&gt;到临时文件，然后再 rename 为磁盘文件的原名称，覆盖原文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子进程带有主进程的数据副本，这里使用子进程而不是线程，因为如果是使用线程，&lt;strong&gt;多线程共享内存&lt;/strong&gt; ，那么在修改共享内存数据的时候，需要通过&lt;strong&gt;加锁&lt;/strong&gt; 来保证数据的安全，而这样就会&lt;strong&gt;降低性能&lt;/strong&gt; 。而使用子进程，创建子进程时，父子进程是共享内存数据的，不过这个共享的内存只能以&lt;strong&gt;只读&lt;/strong&gt; 的方式，而当父子进程任意一方修改了该共享内存，就会发生「&lt;strong&gt;写时复制&lt;/strong&gt;」（这里的写时复制和RDB的写时复制是同一个），于是父子进程就有了独立的数据副本，就不用加锁来保证数据安全。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主进程在通过fork系统调用生成bgrewriteaof子进程时，操作系统会把&lt;strong&gt;主进程的「页表」复制一份给子进程&lt;/strong&gt; ，这个页表记录着虚拟地址和物理地址映射关系，而不会复制物理内存，也就是说，两者的虚拟空间不同，但其对应的物理空间是同一个。这样父子进程就可以共享只读数据了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/ce450a082dfc48ba8df6bc821dcd64e3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
当父进程或者子进程在向这个内存发起写操作时，由于违反权限CPU会触发写保护中断，然后操作系统会在「写保护中断处理函数」里进行物理内存的复制，并&lt;strong&gt;重新设置其内存映射关系&lt;/strong&gt; ，将父子进程的内存读写权限设置为可读写，最后才会对内存进行写操作，这个过程被称为&lt;strong&gt;写时复制&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/direct/854f7a49dc58480f9f3bc3a9e0661230.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;3混合持久化&#34;&gt;&lt;a href=&#34;#3%e6%b7%b7%e5%90%88%e6%8c%81%e4%b9%85%e5%8c%96&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;3.混合持久化
&lt;/h2&gt;&lt;h2 id=&#34;redis-40-开始支持-rdb-和-aof-的混合持久化默认关闭可以通过配置项-aof-use-rdb-preamble-开启&#34;&gt;&lt;a href=&#34;#redis-40-%e5%bc%80%e5%a7%8b%e6%94%af%e6%8c%81-rdb-%e5%92%8c-aof-%e7%9a%84%e6%b7%b7%e5%90%88%e6%8c%81%e4%b9%85%e5%8c%96%e9%bb%98%e8%ae%a4%e5%85%b3%e9%97%ad%e5%8f%af%e4%bb%a5%e9%80%9a%e8%bf%87%e9%85%8d%e7%bd%ae%e9%a1%b9-aof-use-rdb-preamble-%e5%bc%80%e5%90%af&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 &lt;code&gt;aof-use-rdb-preamble&lt;/code&gt; 开启）。
&lt;/h2&gt;</description>
        </item>
        
    </channel>
</rss>
